{"version":3,"sources":["components/RankRow.js","components/Input.js","lib/ParseUser.js","logo.svg","components/RankList.js","App.js","reportWebVitals.js","index.js"],"names":["RankRow","data","rowid","style","rank","party","members","map","m","handle","points","problemResults","r","Input","contestID","url","useState","sUrl","setUrl","sContestID","setContestID","className","Form","Row","Col","xs","Label","htmlFor","srOnly","FormControl","id","placeholder","defaultValue","onChange","e","target","value","InputGroup","Prepend","Text","to","Button","type","ProxyHost","ParseCFUsersFromRank","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","RankList","props","state","filterUrl","loading","needRetry","failed","users","errored","this","status","json","result","contest","phase","forceUpdate","match","params","location","search","Spinner","width","height","animation","role","cf","src","logo","alt","name","Table","variant","size","responsive","striped","problems","p","index","rows","i","ParseCFUsersFromURL","actionFetchRanks","alert","repeatedWork","interval","setInterval","setRefreshIfNecessary","clearInterval","React","Component","App","path","render","key","Math","random","toString","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa42a101.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function RankRow({data, rowid}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr>\n        <td style={{ \"text-align\": \"left\" }}>{rowid}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.party.members.map(m => m.handle + \" \")}</td>\n        <td >{data.points}</td>\n        <td ></td>\n        {data.problemResults.map(r => <td>{r.points}</td>)}\n    </tr>)\n}\n","import { useState } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n\nconst Input =  ({contestID, url}) => {\n    const [sUrl, setUrl] = useState(url)\n    const [sContestID, setContestID] = useState(contestID)\n\n\nreturn <div className=\"input-url\">\n    <Form>\n        <Form.Row className=\"align-items-center\">\n            <Col xs=\"auto\">\n                <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                    URL\n                </Form.Label>\n                <FormControl\n                    className=\"mb-2\"\n                    id=\"inlineFormInput\"\n                    placeholder=\"city/organization cf url\"\n                    defaultValue={url}\n                    onChange={e => setUrl(e.target.value)}\n                />\n            </Col>\n            <Col xs=\"auto\">\n                <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n                    ContestID\n                </Form.Label>\n                <InputGroup className=\"mb-2\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>@</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        id=\"inlineFormInputGroup\"\n                        placeholder=\"ContestID\"\n                        defaultValue={contestID}\n                        onChange={e=>setContestID(e.target.value)}\n                    />\n                </InputGroup>\n            </Col>\n            <Col xs=\"auto\">\n                <Link to={\"/contest/\" + sContestID + \"?url=\" + sUrl}>\n                    <Button type=\"submit\" className=\"mb-2\">\n                        Fetch\n                    </Button>\n                </Link>\n            </Col>\n        </Form.Row>\n    </Form>\n</div>\n}\n\nexport default Input","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nexport default async function ParseCFUsersFromRank(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n        //debugger\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Input from \"./Input\"\nimport React from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id) => `/contest.standings?contestId=`+id+`&handles=`\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\n class RankList extends React.Component{\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, contestID: 1541, filterUrl: BSMRSTU_ORG_URL, loading:true, needRetry:true, failed:false };\n     }\n\n     async actionFetchRanks(users){\n         var errored = false\n         const url = CF_API + CF_STANDING_URL(this.state.contestID) + users\n         console.log(\"Fetching\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n             if (this.state.data.contest.phase == \"FINISHED\") {\n                 this.state.needRetry = false\n             } else {\n                 this.state.needRetry = true\n             }\n         } else {\n            this.state.needRetry = false\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n     render(){\n        try{\n            const { match: { params: { contestID } }, location:{search} } = this.props;\n            var filterUrl = search.match(`url=(.+)`)[1]\n            if (contestID != null && filterUrl != null) {\n                this.state.contestID = contestID\n                this.state.filterUrl = filterUrl\n            }\n            console.log(\"state set\", this.state.contestID, this.state.filterUrl)\n\n         }catch(e){\n             console.log(\"couldn't read params\", e)\n         }\n\n         if (this.state.data == null){\n\n            if (this.state.loading == false){\n                return <div>\n                    <Input contestID={this.state.contestID} url={this.state.filterUrl} />\n                        <div className=\"stopped\">\n\n                        {/* <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner> */}\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <Input contestID={this.state.contestID} url={this.state.filterUrl}/>\n                    <div className=\"loading\">\n\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        var cf = this.state.data\n        return <div>\n            <Input contestID={this.state.contestID} url={this.state.filterUrl} />\n            {cf.contest.phase == \"FINISHED\" && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase != \"FINISHED\" && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}>#</th>\n                            <th style={{ \"text-align\": \"left\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th >Points</th>\n                            <th style={{ \"text-align\": \"left\"}}> </th>\n                            {cf.problems.map(p => <th>{p.index}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} rowid={i + 1} data={r} />) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return ParseCFUsersFromURL(this.state.filterUrl)\n        .then(\n            (users) => {\n                console.log(\"users\", users)\n                return this.actionFetchRanks(users)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n        if (this.state.needRetry) {\n            this.interval = setInterval(()=>{this.repeatedWork()}, 30000);\n        }\n    }\n\n     componentDidMount() {\n         this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         clearInterval(this.interval);\n     }\n//      componentDidUpdate(prevProps, prevState, snapshot) {\n//     //      debugger\n//     //      // Check to see if the \"applied\" flag got changed (NOT just \"set\")\n//     //      if (this.props.location.state.applied && !prevProps.location.state.applied) {\n//     //          this.state = { data: null, contestID: 1541, filterUrl: BSMRSTU_ORG_URL, loading: true, needRetry: true, failed: false }\n//     //          this.forceUpdate()\n//     //      }\n//     //  }\n}\n\nexport default RankList;\n\n","import './App.css';\nimport RankList from './components/RankList'\nimport {BrowserRouter, Switch, Route}  from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BrowserRouter>\n          <div>\n            <Switch>\n              {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n              <Route path=\"/contest/:contestID\" render={(props) => <RankList {...props} key={Math.random().toString(36)} />} />\n              <Route path=\"/\" component={RankList} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}