{"version":3,"sources":["components/RankRow.js","lib/UrlInfo.js","lib/Goto.js","components/Navigation.js","lib/CF.js","logo.svg","lib/Handles.js","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestList.js","components/ContestListLayout.js","components/OrgsList.js","components/OrgsListLayout.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["validStr","str","undefined","RankRow","data","localRank","userInfo","getUserRank","handle","rank","mainContent","r","className","points","bestSubmissionTimeSeconds","Date","toISOString","substr","rejectedCount","rejectedAttemptCount","havingPenalty","penalty","style","party","participantType","members","map","m","replace","target","href","title","firstName","lastName","problemResults","getQueryVariable","search","variable","vars","substring","split","i","length","pair","decodeURIComponent","UrlInfo","props","handles","location","slice","parsedHandles","url","contestID","match","params","unofficial","HashFromURL","hash","charCodeAt","getHashCode","toString","SameUrl","prop1","prop2","BuildUrl","to","nextPath","GetRanklistUrl","Navigation","rUrl","rContestID","rHandles","rUnofficial","useState","setUrl","setContestID","setHandles","setUnofficial","invisible","setInvisible","InputJSX","Form","Label","htmlFor","srOnly","FormControl","size","id","placeholder","value","onChange","e","type","checked","Button","Navbar","bg","variant","Nav","Link","active","pathname","startsWith","disabled","onClick","ProxyHost","CF_API","CF_STANDING_URL","users","CF_USER_INFO","ParseCFUsersFromURL","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","ParseCFOrgsCached","headers","json","FetchRanks","errored","status","result","FetchUserInfo","StringToHandleSet","Set","UniqueParsedHandles","hParsed","oldHandles","ph","oh","diff","setA","setB","_difference","elem","delete","setDifference","cnt","unq","join","tot","IsSameHandles","ha","hb","as","bs","has","eqSet","CONTEST_FINISHED","RankList","_isMounted","h","state","loading","needRetry","failed","renderCount","this","contest","phase","setState","mp","pageID","promises","push","Promise","all","pHandles","table","total","urls","parseHandlesFromSingleURLAndPages","parseHandlesFromAllUrls","totalHandles","uniqueHandles","uniqueCount","history","actionFetchRanks","actionFetchUserInfo","parseHandles","parseRankInterval","setInterval","clearInterval","setRefreshIfNecessary","nextProps","nextState","relativeTimeSeconds","durationSeconds","percent","Math","round","colSpan","ProgressBar","now","animated","invalidArgs","Spinner","width","height","animation","role","cf","lastRank","currentRank","rows","src","logo","alt","name","Table","responsive","striped","bordered","displayProgressBar","problems","p","rating","index","React","Component","CommonLayout","children","RankListLayout","CF_CONTESTS_URL","gym","ContestList","selectRef","refID","searchStr","onFilter","bind","handleCheckbox","forceUpdate","selContest","Number","current","rID","toLowerCase","includes","hidden","row","ref","textAlign","defaultValue","defaultChecked","createRef","renderRow","renderContests","actionFetchContests","alert","fetchContests","ContestListLayout","OrgsList","urlSet","selOrg","add","compiledUrl","org","orgs","renderOrgs","parseOrgs","OrgsListLayout","AppContainer","path","render","from","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.941f6e3d.chunk.js","sourcesContent":["import React from 'react'\nimport './RankRow.css'\nimport './CFHandles.css'\n\n\nconst rankToCSSClassName =(rank) => rank.replace(/\\s/g, \"\");\n\nfunction validStr(str){\n    if(str === undefined || str === null)\n        return \"\"\n    return str\n}\n\nexport default function RankRow({data, localRank, userInfo}){\n    const items = []\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    const getUserRank = (handle) => {\n        if (handle in userInfo){\n            return userInfo[handle].rank\n        }\n        return \"\"\n    }\n\n    const getUserFullName = (handle) => {\n        if (handle in userInfo) {\n                return validStr(userInfo[handle].firstName) + \" \" +  validStr(userInfo[handle].lastName)\n        }\n        return \"\"\n    }\n\n    const mainContent = (r) => <div className=\"rank-main-content\">\n        <span className=\"cell-points\">{r.points} </span>\n        <span className=\"cell-time\">{r.bestSubmissionTimeSeconds && new Date(r.bestSubmissionTimeSeconds * 1000).toISOString().substr(11, 8)}</span>\n    </div>\n\n    const rejectedCount = (r) => <span className=\"cell-rejected\">{-r.rejectedAttemptCount}</span>\n\n    let havingPenalty = (data.rank > 0 && data.penalty > 0)\n\n    return (<tr className=\"rank-font\">\n        <td style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >{data.rank > 0 && localRank}</span></td>\n        <td style={{ \"text-align\": \"center\" }}>{data.rank > 0 && data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}><div className=\"handle-cell-div\">\n            {data.party.participantType !== \"CONTESTANT\" && <span style={{ \"color\": \"#fff\" }}>*</span>}\n            {data.party.members.map(m => \n            <div className={\"handle \" + rankToCSSClassName(getUserRank(m.handle))}> <a target=\"_blank\" href={\"https://codeforces.com/profile/\" + m.handle} title={getUserRank(m.handle) + \" \" + getUserFullName(m.handle)} >\n                <div> <span className=\"firstLetter\">{m.handle.substr(0, 1)}</span>{ m.handle.substr(1) } </div>\n             </a></div> )} </div>\n        </td>\n        \n        <td >\n            <div className=\"rank-cell-div\">\n                {havingPenalty && <div className=\"rank-side-content\"></div>}\n                <div className=\"rank-main-content\"><span className=\"total-points\" title=\"total points\">{data.points}</span> </div>\n                {havingPenalty &&  <div className=\"rank-side-content\"><span title=\"total penalty\" className=\"cell-rejected\">{data.penalty} </span> </div>}\n            </div>\n        </td>\n        <td ></td>\n        {data.problemResults.map(r => {\n            return <td>\n                <div className=\"rank-cell-div\">\n                    {r.points > 0  && <div className=\"rank-side-content\"></div>}\n                    {r.points > 0 && mainContent(r)}\n                    <div className=\"rank-side-content\">{r.rejectedAttemptCount > 0 && rejectedCount(r)}</div>\n                </div>\n            </td>\n        })}\n    </tr>)\n}\n","\n\nfunction getQueryVariable(search, variable) {\n    var query = search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) == variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return \"\"\n}\n\n\nfunction getHashCode(str) {\n    var hash = 0, i, chr;\n    if (str.length === 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\nexport function UrlInfo(props){\n    let handles = getQueryVariable(props.location.search, \"handles\")\n    if(handles.length > 0 && handles.slice(-1) != \";\"){\n        handles = handles + \";\"\n    }\n\n    let parsedHandles = getQueryVariable(props.location.search, \"parsedHandles\")\n    if (parsedHandles.length > 0 && parsedHandles.slice(-1) != \";\") {\n        parsedHandles = parsedHandles + \";\"\n    }\n\n    return {\n        url: getQueryVariable(props.location.search, \"url\"),\n        contestID: props.match.params.contestID,\n        handles: handles,\n        parsedHandles: parsedHandles,\n        unofficial: getQueryVariable(props.location.search, \"unofficial\") == \"true\"\n    }\n}\n\nexport function HashFromURL(props){\n    const {url, contestID, handles, parsedHandles, unofficial} = UrlInfo(props)\n    return getHashCode(url + contestID + handles + parsedHandles + unofficial.toString())\n}\n\n\nexport function SameUrl(prop1, prop2){\n    return HashFromURL(prop1) == HashFromURL(prop2)\n}\n\nexport function BuildUrl(to, contestID, url, handles, parsedHandles, unofficial){\n    let nextPath = to\n    if (nextPath.length > 0 && nextPath.slice(-1)!= \"/\")\n    {\n        nextPath = nextPath + \"/\"\n    }\n    if(!contestID) {\n        contestID = \"1541\"\n    }\n    nextPath = nextPath + contestID + \"?\"\n    if(url !== \"\"  && url != undefined){\n        nextPath = nextPath + \"url=\" + url + \"&\"\n    } else {\n        parsedHandles = \"\"\n    }\n\n    if(unofficial && unofficial.toString() == \"true\"){\n        nextPath = nextPath + \"unofficial=true&\"\n    }\n\n\n    if (handles !== \"\" && handles != undefined) {\n        nextPath =  nextPath + \"handles=\" + handles + \"&\"\n    }\n\n    if (parsedHandles !== \"\" && parsedHandles != undefined) {\n        nextPath = nextPath + \"parsedHandles=\" + parsedHandles + \"&\"\n    }\n\n    if (nextPath.length > 0 && nextPath.slice(-1) === \"&\") {\n        nextPath = nextPath.slice(0, -1);\n    }\n    return nextPath\n}","import { BuildUrl, UrlInfo } from \"./UrlInfo\";\n\nexport function GetRanklistUrl(contestID, url, handles, parsedHandles, unofficial){\n    return BuildUrl(\"/contest\", contestID, url, handles, parsedHandles, unofficial)\n}\n\nexport function GetOrgsUrl(contestID, url, handles, parsedHandles, unofficial) {\n    return BuildUrl(\"/selector/orgs\", contestID, url, handles, parsedHandles, unofficial)\n}\n\nexport function GetContestUrl(contestID, url, handles, parsedHandles, unofficial) {\n    return BuildUrl(\"/selector/contests\", contestID, url, handles, parsedHandles, unofficial)\n}","import Input from './Input'\nimport { useLocation } from 'react-router';\n\nimport { useState, useEffect } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, Navbar, Nav, ToggleButton} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport \"./Navigation.css\"\nimport {BuildUrl} from \"../lib/UrlInfo\"\nimport {GetRanklistUrl} from \"../lib/Goto\"\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n    var rHandles = props.handles\n    var rUnofficial = props.unofficial\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n    const [handles, setHandles] = useState(rHandles)\n    const [unofficial, setUnofficial] = useState(rUnofficial)\n    const [invisible, setInvisible] = useState(false)\n\n    var InputJSX = <div className={invisible? \"hide-me\":\"parent-input-div one-elm-flex\"}>\n        <Form key={rUrl + rContestID} className=\"width-hundred one-elm-flex\">\n            <div className=\"width-hundred flex-input-div\">\n                \n                <div className=\"handles-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        Handles\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"handles seperated by ;\"\n                        // defaultValue={rHandles}\n                        value={handles}\n                        onChange={e => setHandles(e.target.value)}\n                    // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"url-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url seperated by ;\"\n                        // defaultValue={rUrl}\n                        value={url}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n                <div className=\"contest-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput2\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0\"\n                        id=\"inlineFormInput2\"\n                        placeholder=\"ContestID\"\n                        value={contestID}\n                        onChange={\n                            (e) => {\n                                setContestID(e.target.value)\n                            }\n                        }\n                    />\n                </div>\n               \n                <div className=\"unofficial-div min-width one-elm-flex\">\n                    <input type=\"checkbox\" className=\"btn-light\" checked={unofficial} onChange={e=>{\n                        setUnofficial(e.target.checked)\n                    }}/> <span>unofficial</span>\n                </div>\n\n                <div className=\"button-div min-width one-elm-flex\">\n                    <Link to={GetRanklistUrl( contestID, url, handles, props.parsedHandles, unofficial)}>\n                        <Button type=\"submit\" className=\"mb-0 btn-light\" size=\"sm\">\n                            Load\n                        </Button>\n                    </Link>\n                </div>\n            </div>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className='navbar-expand-sm'>\n        <Nav className=\"mr-auto width-hundred\">\n            <Nav.Link href={BuildUrl(\"#selector/contests/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link href={BuildUrl(\"#selector/orgs/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/orgs\")}>Orgs</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n\n            <div className=\"one-elm-flex\"><input type=\"checkbox\" onClick={e => setInvisible(e.target.checked)} value={invisible} /></div>\n            {InputJSX}\n        </Nav>\n\n        \n    </Navbar>\n    </div>\n\n}","\n\nconst ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id, unofficial, users) => `/contest.standings?showUnofficial=` + unofficial + `&contestId=` + id + `&handles=` + users\nconst CF_USER_INFO = (users) => `/user.info?handles=` + users\nconst CONTEST_FINISHED = \"FINISHED\"\n\n\nexport async function ParseCFUsersFromURL(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n        return \"\"\n    });\n}\n\nexport async function ParseCFOrgs() {\n    let url = `https://codeforces.com/ratings`\n    return fetch(ProxyHost + url, {\n        \"X-Requested-With\": \"cf\"\n    })\n        .then((response) => {\n            return response.text()\n        }).then(function (html) {\n            let parser = new DOMParser();\n\n            let doc = parser.parseFromString(html, \"text/html\").querySelector(\"#locationSelect > label > select\")\n\n            // let vals = {}\n            // for (var i = 0, n = sel.options.length; i < n; i++) { // looping over the options\n            //     if (sel.options[i].value) vals.push(sel.options[i].value);\n            // }\n\n            \n            var docAsStr = doc.innerHTML.replaceAll(/(\\r\\n|\\n|\\r)/gm, \"\").replaceAll(\"</option>\",\"ENDXXXEND\\n\");\n\n            var found = [...docAsStr.matchAll(`<option.*value=\\\"(.*)\\\".*>(.+?)ENDXXXEND`)]\n\n            let resp = []\n            let skipFirst = true\n            for (const f of found) {\n                if(skipFirst){\n                    skipFirst = false\n                    continue\n                }\n                resp.push({name:f[2], url:url+\"/organization/\" + f[1], orgID:f[1]})\n            }\n            return resp\n        })\n        .catch(function (err) {\n            console.log('Failed to fetch page: ', err);\n            return \"\"\n        });\n}\n\nexport async function ParseCFOrgsCached() {\n    return fetch(\"orgs.json\", {\n        headers:{\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    })\n    .then((response) => {\n        return response.json()\n    })\n}\n\n\n\n\n\n\nexport async function FetchRanks(contestID, users, unofficial){\n    var errored = false\n    const url = CF_API + CF_STANDING_URL(contestID, unofficial, users)\n    console.log(\"Fetching\", url)\n    const resp = await fetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        });\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\nexport async function FetchUserInfo(users, unofficial) {\n    var errored = false\n    const url = CF_API + CF_USER_INFO(users)\n    console.log(\"Fetching\", url)\n    const resp = await fetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        });\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\n\nexport function GetContestStatusText(status) {\n    if (status === CONTEST_FINISHED) {\n        return \"Final Standings\"\n    }\n\n    if (status === \"PENDING_SYSTEM_TEST\") {\n        return \"Pending System Test\"\n    }\n\n    if (status === \"SYSTEM_TEST\") {\n        return \"System Testing\"\n    }\n\n    if (status === \"CODING\") {\n        return \"Contest is Running\"\n    }\n}\n\nexport function GetHandleTitle(rating) {\n    if (rating < 1200) {\n        return \"newbie\"\n    }\n\n    if (rating < 1400) {\n        return \"pupil\"\n    }\n\n    if (rating < 1600) {\n        return \"specialist\"\n    }\n\n    if (rating < 1900) {\n        return \"expert\"\n    }\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { GetHandleTitle } from \"./CF\";\n\nexport const UserDefined = 1;\nexport const OrgDefined = 2;\nexport const HideIfFromOrg = 4;\n\nexport class Flag {\n    flag = 0\n    Set(flag){\n        this.flag = this.flag | flag\n    }\n    Check(flag){\n        return (this.flag & flag) !== 0\n    }\n}\n\nfunction setDifference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\nfunction eqSet(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport function StringToHandleSet(handles){\n    if(handles == undefined || handles == null) return new Set();\n    return new Set(handles.split(\";\"))\n}\n\nexport function HandleSetToString(handles) {\n    return [...handles].join(';') + \";\"\n}\n\nexport function UniqueParsedHandles(hParsed, oldHandles){\n    let ph = StringToHandleSet(hParsed)\n    let oh = StringToHandleSet(oldHandles)\n    let diff = setDifference( ph , oh)\n    return {\n        cnt: diff.size,\n        unq: HandleSetToString(diff),\n        tot: oh.size + diff.size - 1\n    }\n}\n\nexport function IsSameHandles(ha, hb) {\n    return eqSet(StringToHandleSet(ha), StringToHandleSet(hb))\n}\n\n","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button, ProgressBar } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport { ParseCFUsersFromURL, FetchRanks, GetContestStatusText, FetchUserInfo} from \"../lib/CF\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\nimport { GetRanklistUrl} from \"../lib/Goto\"\nimport { IsSameHandles, UniqueParsedHandles } from \"../lib/Handles\"\n\n\n\n\n\nconst CONTEST_FINISHED = \"FINISHED\"\nconst MAX_ASYNC_HANDLE_PARSER_PER_URL = 2\n\n\n\nclass RankList extends React.Component{\n    _isMounted = false\n\n    constructor(props) {\n        super(props);\n        let h = props.handles;\n        if(props.url !== \"\"){\n            h = h + props.parsedHandles\n        }\n        this.state = { data: null, loading:true, needRetry:true, failed:false, handles: h, renderCount: 0, userInfo:{} };\n    }\n\n    async actionFetchRanks(users){\n\n        let resp = await FetchRanks(this.props.contestID, users, this.props.unofficial)\n\n        if (resp !== undefined) {\n            this.state.data = resp\n            if (this.state.data.contest.phase == CONTEST_FINISHED) {\n                this.state.needRetry = false\n            } else {\n                this.state.needRetry = true\n            }\n        } else {\n            this.state.needRetry = false\n        }\n    \n        this.state.loading = false\n        if(this._isMounted){\n            this.setState({\n                renderCount:this.state.renderCount + 1\n            })\n        }\n    }\n\n    async actionFetchUserInfo(users) {\n        let resp = await FetchUserInfo(users)\n        if (resp !== undefined) {\n            let mp = {}\n            resp.map(r => mp[r.handle] = r)\n            this.state.userInfo = mp\n        } else {\n            console.log(\"user-info not found. unable to set colors\")\n        }\n\n        if (this._isMounted) {\n            this.setState({\n                renderCount: this.state.renderCount + 1\n            })\n        }\n    }\n\n    async parseHandlesFromSingleURLAndPages(url) {\n        let handles = \"\"\n        let pageID = 1\n\n        while(true){\n            let promises = []\n            for (let i = 1; i <= MAX_ASYNC_HANDLE_PARSER_PER_URL; i++) {\n                promises.push(ParseCFUsersFromURL(url + \"/page/\" + pageID))\n                pageID++\n            }\n\n            let pHandles = await Promise.all(promises)\n\n            for (let i = 0; i < pHandles.length; i++) {\n                var { unq, cnt, tot } = UniqueParsedHandles(pHandles[i], handles)\n                if (cnt > 0) {\n                    handles += unq\n                } else {\n                    break\n                }\n            }\n            \n            if(cnt <= 0 || pageID > 20) {\n                break\n            }\n        }\n        \n        console.table({ log: \"Parse handle result per url\", url: url, total: tot, handles:handles })\n        return handles\n    }\n\n    async parseHandlesFromAllUrls(url){\n        let handles = \"\"\n        let urls = url.split(\";\")\n        let promises = []\n        for(let i = 0; i < urls.length; i++){\n            if(urls[i] === \"\") return\n            promises.push(this.parseHandlesFromSingleURLAndPages(urls[i]))\n        }\n\n        let pHandles = await Promise.all(promises)\n\n        for(let i = 0; i < pHandles.length; i++){\n            var { unq, cnt, tot } = UniqueParsedHandles(pHandles[i], handles)\n            if(cnt > 0){\n                handles += unq\n            }\n        }\n        console.table({ log: \"Total handles parsed\", total: tot, handles:handles})\n        return handles\n    }\n\n    async parseHandles() {\n        if(this.props.url === undefined || this.props.url === \"\"){\n            return\n        }\n        this.state.loading = true\n        let handles = await this.parseHandlesFromAllUrls(this.props.url)\n\n        var { unq, cnt, tot } = UniqueParsedHandles(handles, this.props.handles)\n\n        console.table({ log: \"Total handles parsed - custom handles\", total: tot, totalHandles: handles, uniqueHandles: unq, uniqueCount: cnt })\n\n\n        let isSame = IsSameHandles(unq, this.props.parsedHandles)\n        if (isSame){\n            return\n        }\n\n\n        if (this._isMounted) {\n            this.props.history.push(GetRanklistUrl(this.props.contestID, this.props.url, this.props.handles, unq, this.props.unofficial))\n        }\n    }\n\n    async setRefreshIfNecessary(){\n        if(this.state.handles !== \"\") {\n            this.actionFetchRanks(this.state.handles)\n            this.actionFetchUserInfo(this.state.handles)\n        }\n        await this.parseHandles()\n        if (this.state.needRetry) {\n            this.parseRankInterval = setInterval(() => { this.actionFetchRanks(this.state.handles) }, 30000);\n        }\n    }\n    componentWillUnmount() {\n        clearInterval(this.parseRankInterval);\n        this._isMounted = false;\n    }\n\n    componentDidMount() {\n        this.setRefreshIfNecessary().then()\n        this._isMounted = true\n    }\n     \n\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.renderCount != this.state.renderCount) {\n            return true\n        }\n        if (nextState.handles != this.state.handles) {\n            this.actionFetchRanks(nextState.handles)\n            return false\n        }\n        return false\n    }\n\n\n    displayProgressBar(relativeTimeSeconds, durationSeconds) {\n        if (relativeTimeSeconds == undefined || durationSeconds == undefined) {\n            return\n        }\n        if (relativeTimeSeconds > durationSeconds || relativeTimeSeconds < 0) {\n            return\n        }\n        let percent = Math.round((relativeTimeSeconds / durationSeconds) * 100)\n        return <tr>\n            <th colSpan=\"100\">\n                <ProgressBar variant=\"info\" now={percent} animated ></ProgressBar>\n            </th>\n        </tr>\n    }\n\n    render() {\n        let invalidArgs = (this.props.handles == \"\") && (this.props.url == \"\")\n\n        if (invalidArgs) {\n            this.state.loading = false\n        }\n        if (invalidArgs || this.state.data == null) {\n\n            if (this.state.loading == false) {\n                return <div>\n                    <div className=\"stopped\">\n                        <br /><br /><br />\n                        <p>Not Available or Invalid Args!</p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        let cf = this.state.data\n        let lastRank = 1\n\n        const currentRank = (i) => {\n            if (i === 0 || cf.rows[i - 1].rank == cf.rows[i].rank) {\n                return lastRank\n            }\n            return lastRank = i + 1\n        }\n\n        return <div>\n            {cf.contest.phase === CONTEST_FINISHED && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase !== CONTEST_FINISHED && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"white-hyperlink\" colSpan=\"100\">\n                                <a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/standings\"}>{GetContestStatusText(cf.contest.phase)}</a>\n                            </th>\n                        </tr>\n                        {this.displayProgressBar(cf.contest.relativeTimeSeconds, cf.contest.durationSeconds)}\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >#</span></th>\n                            <th style={{ \"text-align\": \"center\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th> Score </th>\n                            <th style={{ \"text-align\": \"left\" }}> </th>\n                            {cf.problems.map(p => { \n                                let rating = 1;\n                                if(p.rating !== undefined){\n                                    rating = p.rating\n                                }\n                                return <th className=\"white-hyperlink\" title={p.name + \" : \" + rating}><a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/problem/\" + p.index}>{p.index}</a></th>})}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} localRank={currentRank(i)} data={r} userInfo={this.state.userInfo} />)}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nimport { UrlInfo, HashFromURL, SameUrl } from \"../lib/UrlInfo\"\n\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"rank-layout-rendering\", this.props)\n        return (\n            <div>\n                <CommonLayout key=\"rank-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <RankList key={\"rank-list\" + HashFromURL(this.props)} {...this.props} {...UrlInfo(this.props)}></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport React, { useDebugValue } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ContestList.css';\nimport logo from '../logo.svg';\nimport { ParseCFOrgs, ParseCFOrgsCached } from '../lib/CF'\n\nimport { GetContestUrl } from \"../lib/Goto\"\n\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\n\n\nclass ContestList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n        this.state = { data: null, loading: true, needRetry: true, failed: false, searchStr:\"\", renderCount:0 };\n         this.onFilter = this.onFilter.bind(this);\n         this.handleCheckbox = this.handleCheckbox.bind(this);\n\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n    handleCheckbox(e) {\n        let selContest = e.target.value\n        if (!e.target.checked) {\n            e.target.checked = true\n            return\n        }\n        let oldRef = this.selectRef[this.refID[Number(this.props.contestID)]].current\n\n        oldRef.children[0].children[0].children[0].checked = false\n        this.props.history.push(GetContestUrl(selContest, this.props.url, this.props.handles, this.props.parsedHandles, this.props.unofficial))\n    }\n\n\n    onFilter(e){\n        if (this.state.searchStr == undefined) {\n            this.state.searchStr = \"\"\n        }\n        this.state.data.map((contest) => {\n            let rID = this.refID[contest.id]\n            if (rID === undefined) {\n                return\n            }\n            let r = this.selectRef[rID].current\n            if (contest.name.toLowerCase().includes(this.state.searchStr.toLowerCase())) {\n                r.hidden = false\n            } else {\n                r.hidden = true\n            }\n        })\n        \n    }\n\n    renderRow(row) {\n        if (row == null || row == undefined) {\n            return <tr><td>called with null</td></tr>\n        }\n\n        return (<tr ref={this.selectRef[this.refID[row.id]]} >\n            <td textAlign=\"left\"> <div className=\"div-checkbox-selector checkbox-contest\" > <input type=\"checkbox\" onChange={this.handleCheckbox} defaultValue={row.id} defaultChecked={row.id == this.props.contestID} /> </div></td>\n            <td textAlign=\"left\">{row.name}</td>\n            <td textAlign=\"left\">{row.id}</td>\n            <td textAlign=\"center\"><a href={\"https://codeforces.com/contest/\" + row.id} target=\"_blank\">link</a></td>\n        </tr>\n        )\n    }\n\n     renderContests(){\n         var cf = this.state.data\n\n\n         return <div className=\"contests content-div\" key=\"contests-div\">\n             <Table key='contests-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                 <thead>\n                     <tr>\n                         <th colSpan=\"20\">\n                             <div className=\"filter-container flex-input-div\">\n                                 <div>\n                                     <FormControl\n                                        size=\"sm\"\n                                        placeholder=\"Filter by Tittle\" defaultValue={this.state.searchStr}\n                                        onChange={e => {\n                                        this.state.searchStr = e.target.value\n                                        this.onFilter(e)\n                                        }}></FormControl>\n                                 </div>\n                             </div>\n\n                         </th>\n                     </tr>\n\n                     <tr>\n                         <th></th>\n                         <th>Contest Tittle</th>\n                         <th>ID</th>\n                         <th>Codeforces</th>\n                     </tr>\n\n\n                 </thead>\n                 <tbody>\n                         {cf.map((r, i) => {\n                             if (r.phase === \"BEFORE\") {\n                                 return\n                             }\n\n                             if (!(r.id in this.refID)) {\n                                 this.selectRef.push(React.createRef())\n                                 this.refID[r.id] = this.selectRef.length - 1\n                             }\n\n                             return this.renderRow(r)\n                         })}\n                 </tbody>\n             </Table>\n         </div>\n     }\n     \n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n         return <div key=\"content-list-div\" className=\"content-list-div\" >\n            {this.renderContests()}            \n        </div>\n     }\n\n\n    async fetchContests() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"contests-data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.fetchContests()\n    }\n\n     componentDidMount() {\n        this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextState && this.state.renderCount != nextState.renderCount){\n            return true\n        }\n        return false\n    }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass ContestListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <ContestList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport React, { useDebugValue } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './OrgsList.css';\nimport logo from '../logo.svg';\nimport { ParseCFOrgs, ParseCFOrgsCached } from '../lib/CF'\n\nimport { Link } from 'react-router-dom'\n\nimport { GetOrgsUrl } from \"../lib/Goto\"\n\n\nclass OrgsList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n        this.handleCheckbox = this.handleCheckbox.bind(this);\n        this.onFilter = this.onFilter.bind(this);\n        this.state = { data: null, loading: true, urlSet: new Set(props.url.split(\";\")), failed: false, searchStr:\"\", renderCount:0 };\n     }\n\n     handleCheckbox(e){\n        let selOrg = e.target.defaultValue\n        if(e.target.checked){\n            this.state.urlSet.add(selOrg)\n        } else {\n            this.state.urlSet.delete(selOrg)\n        }\n        this.state.urlSet.delete(\"\")\n        let compiledUrl = [...this.state.urlSet].join(';')\n        console.log(\"marked\", selOrg, e.target.checked, \"url\", compiledUrl)\n        this.props.history.push(GetOrgsUrl(this.props.contestID, compiledUrl, this.props.handles, this.props.parsedHandles, this.props.unofficial))\n     }\n\n\n    onFilter(e) {\n        if (this.state.searchStr == undefined) {\n            this.state.searchStr = \"\"\n        }\n        this.state.data.map((org) => {\n            let rID = this.refID[org.url]\n            if (rID === undefined) {\n                return\n            }\n            let r = this.selectRef[rID].current\n            if (org.name.toLowerCase().includes(this.state.searchStr.toLowerCase())) {\n                r.hidden = false\n            } else {\n                r.hidden = true\n            }\n        })\n\n    }\n\n     renderOrgs(){\n        \n         let orgs = [ \"soon to be filled\" ]\n        if(this.state.data !== null && this.state.data !== undefined){\n            orgs = this.state.data\n        }\n\n        return <div className=\"orgs content-div\" key=\"orgs-div\">\n            <Table className=\"org-table\" key='orgs-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                <thead>\n                    <tr>\n                        <th colSpan=\"20\">\n                            <div className=\"filter-container flex-input-div\">\n                                <div>\n                                    <FormControl\n                                        size=\"sm\"\n                                        placeholder=\"Filter by Org Name\"\n                                        onChange={ e => {\n                                            this.state.searchStr = e.target.value\n                                            this.onFilter(e)\n                                        }}></FormControl>\n                                </div>\n                            </div>\n\n                        </th>\n                    </tr>\n                    <tr>\n                        <th></th>\n                        <th></th>\n                        <th>Org Name</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {orgs.map(r =>{ \n                    if (!(r.url in this.refID)) {\n                        this.selectRef.push(React.createRef())\n                        this.refID[r.url] = this.selectRef.length - 1\n                    }\n                    return <tr ref={this.selectRef[this.refID[r.url]]}>\n                        <td >\n                            <div className=\"div-checkbox-selector checkbox-org\"> <input type=\"checkbox\" onChange={this.handleCheckbox} value={r.url} defaultChecked={this.state.urlSet.has(r.url)}/> </div></td>\n                        <td></td><td colSpan=\"200\">{r.name}</td>\n                    </tr>})}\n                </tbody>\n            </Table>\n        </div>\n     }\n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Orgs...</p>\n                    </div>\n                </div>\n            }\n        }\n\n         return <div key=\"orgs-list-div\" className=\"content-list-div\" >\n            {this.renderOrgs()}\n            \n        </div>\n     }\n\n\n\n\n    async parseOrgs(){\n        // let orgs = await ParseCFOrgs()\n        let data = await ParseCFOrgsCached()\n        this.setState({\n            data:data,\n            renderCount: this.state.renderCount + 1\n        })\n    }\n     componentDidMount() {\n        this.parseOrgs()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextState){\n            return nextState.renderCount != this.state.renderCount\n        }\n        return false\n    }\n}\n\nexport default OrgsList;\n\n","import OrgsList from \"./OrgsList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass OrgsListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <OrgsList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></OrgsList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default OrgsListLayout","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport OrgsListLayout from './OrgsListLayout'\nimport Navigation from './Navigation'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useState } from 'react'\n\n\nexport default function AppContainer(){\n    return <HashRouter key='hash-router'>\n        <div className=\"Switch-Route-Block\" key='switch-route-block'>\n            <Switch key='switch-route-sw'>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route key='route-contest-list' path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout key=\"contest-list-layout\" {...props}/>} />\n                <Route key='route-orgs-list' path=\"/selector/orgs/:contestID\" render={(props) => <OrgsListLayout key=\"orgs-list-layout\" {...props}/>} />\n                <Route key='route-rank-list' path=\"/contest/:contestID\" render={(props) => <RankListLayout key=\"single-rank-instance\" {...props}/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\"/>\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer key='app-conatiner'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}