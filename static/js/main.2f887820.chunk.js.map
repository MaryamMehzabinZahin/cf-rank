{"version":3,"sources":["components/RankRow.js","components/Navigation.js","lib/ParseUser.js","logo.svg","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestRow.js","components/ContestList.js","components/ContestListLayout.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RankRow","data","rowid","className","style","rank","party","members","map","m","handle","points","problemResults","r","rejectedAttemptCount","Date","bestSubmissionTimeSeconds","toISOString","substr","Navigation","props","rUrl","url","rContestID","contestID","useState","setUrl","setContestID","console","log","InputJSX","Form","Row","Col","xs","Label","htmlFor","srOnly","FormControl","size","id","placeholder","defaultValue","onChange","e","target","value","to","Button","type","Navbar","bg","variant","Nav","Link","href","active","location","pathname","startsWith","disabled","ProxyHost","ParseCFUsersFromRank","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","RankList","state","filterUrl","loading","needRetry","failed","users","errored","this","status","json","result","contest","phase","forceUpdate","match","params","search","Spinner","width","height","animation","role","cf","src","logo","alt","name","Table","responsive","striped","bordered","problems","p","index","rows","i","ParseCFUsersFromURL","actionFetchRanks","alert","repeatedWork","interval","setInterval","setRefreshIfNecessary","clearInterval","React","Component","CommonLayout","children","RankListLayout","setState","updateStateVars","nextProps","nextState","stateChangedLah","ContestRow","textalign","ref","innerRef","selected","forwardRef","CF_CONTESTS_URL","gym","RowConatiner","searchStr","Children","toArray","filter","child","toLowerCase","includes","ContestList","selectRef","refID","autoFocus","onMouseMove","push","createRef","length","actionFetchContests","Number","current","innerText","ContestListLayout","p1","urlAndContestID","p2","AppContainer","path","render","from","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f887820.chunk.js","sourcesContent":["import React from 'react'\nimport './RankRow.css'\n\nexport default function RankRow({data, rowid}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr className=\"rank-font\">\n        <td style={{ \"text-align\": \"left\" }}>{rowid}</td>\n        <td style={{ \"text-align\": \"center\" }}>{data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.party.members.map(m => m.handle + \" \")}</td>\n        <td >{data.points}</td>\n        <td ></td>\n        {data.problemResults.map(r => {\n            if(r.points == 0){\n                return <td></td>\n            }\n            return <td>\n                <span className=\"cell-points\">{r.points}  <span className=\"cell-rejected\">{r.rejectedAttemptCount > 0 && -r.rejectedAttemptCount}</span></span>\n                \n                <span className=\"cell-time\">{new Date(r.bestSubmissionTimeSeconds * 1000).toISOString().substr(11, 8)}</span>\n            </td>\n            \n            //<td>{r.points}</td>\n        \n        })}\n    </tr>)\n}\n","import Input from './Input'\nimport { useLocation } from 'react-router';\n\nimport { useState, useEffect } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, Navbar, Nav} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport \"./Navigation.css\"\n\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n\n\n    console.log(\"Nav-props\",props)\n\n\n    var InputJSX = <div className=\"input-url\">\n        <Form  key={rUrl+rContestID}>\n            <Form.Row className=\"align-items-center\">\n                <Col xs=\"auto\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url\"\n                        defaultValue={rUrl}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </Col>\n                <Col xs=\"auto\">\n                    <Form.Label htmlFor=\"inlineFormInput2\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 contestID-field\"\n                        id=\"inlineFormInput2\"\n                        placeholder=\"ContestID\"\n                        value={contestID}\n                        onChange={\n                            (e) => {\n                                debugger\n                                setContestID(e.target.value)\n                            }\n                        }\n                    />\n                </Col>\n                {/* <Col xs=\"auto\" >\n                    <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <InputGroup className=\"mb-2 contestID-field\" size=\"sm\">\n                        <InputGroup.Prepend size=\"sm\">\n                            <InputGroup.Text size=\"sm\">@</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            size=\"sm\"\n                            id=\"inlineFormInputGroup\"\n                            placeholder=\"ContestID\"\n                            value={contestID}\n                            onChange={\n                                (e)=> {\n                                    debugger\n                                    setContestID(e.target.value)\n                                }\n                            }\n                        />\n                    </InputGroup>\n                </Col> */}\n                <Col xs=\"auto\">\n                    <Link to={\"/contest/\" + contestID + \"?url=\" + url}>\n                        <Button type=\"submit\" className=\"mb-0 btn-light\" size=\"sm\">\n                            Load\n                        </Button>\n                    </Link>\n                </Col>\n            </Form.Row>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className='navbar-expand-sm'>\n        {/* <Navbar.Brand href=\"\">Navbar</Navbar.Brand> */}\n        <Nav className=\"mr-auto\">\n                <Nav.Link href={\"#selector/contests/\" + contestID + \"?url=\" + url} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n            {/* <Nav.Link href=\"#region\">Features</Nav.Link> */}\n        </Nav>\n        {InputJSX}\n        {/* <Input contestID={contestID} url={url}/> */}\n    </Navbar>\n    </div>\n\n}","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nexport default async function ParseCFUsersFromRank(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n        //debugger\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id) => `/contest.standings?contestId=`+id+`&handles=`\n\n\n class RankList extends React.Component{\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, contestID: 1541, filterUrl: \"\", loading:true, needRetry:true, failed:false };\n     }\n\n     async actionFetchRanks(users){\n         var errored = false\n         const url = CF_API + CF_STANDING_URL(this.state.contestID) + users\n         console.log(\"Fetching\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n             if (this.state.data.contest.phase == \"FINISHED\") {\n                 this.state.needRetry = false\n             } else {\n                 this.state.needRetry = true\n             }\n         } else {\n            this.state.needRetry = false\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n     render(){\n\n        try{\n            const { match: { params: { contestID } }, location:{search} } = this.props;\n            var filterUrl = search.match(`url=(.+)`)[1]\n            if (contestID != null && filterUrl != null) {\n                this.state.contestID = contestID\n                this.state.filterUrl = filterUrl\n            }\n            console.log(\"state set\", this.state.contestID, this.state.filterUrl)\n\n         }catch(e){\n             console.log(\"couldn't read params\", e)\n         }\n\n         if (this.state.data == null){\n\n            if (this.state.loading == false){\n                return <div>\n                        <div className=\"stopped\">\n                        <br/><br/><br/>\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        var cf = this.state.data\n        return <div>\n            {cf.contest.phase == \"FINISHED\" && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase != \"FINISHED\" && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped bordered>\n                    <thead>\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}>#</th>\n                            <th style={{ \"text-align\": \"center\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th >Points</th>\n                            <th style={{ \"text-align\": \"left\"}}> </th>\n                            {cf.problems.map(p => <th>{p.index}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} rowid={i + 1} data={r} />) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return ParseCFUsersFromURL(this.state.filterUrl)\n        .then(\n            (users) => {\n                console.log(\"users\", users)\n                return this.actionFetchRanks(users)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n        if (this.state.needRetry) {\n            this.interval = setInterval(()=>{this.repeatedWork()}, 30000);\n        }\n    }\n\n     componentDidMount() {\n         this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         clearInterval(this.interval);\n     }\n//      componentDidUpdate(prevProps, prevState, snapshot) {\n//     //      debugger\n//     //      // Check to see if the \"applied\" flag got changed (NOT just \"set\")\n//     //      if (this.props.location.state.applied && !prevProps.location.state.applied) {\n//     //          this.state = { data: null, contestID: 1541, filterUrl: BSMRSTU_ORG_URL, loading: true, needRetry: true, failed: false }\n//     //          this.forceUpdate()\n//     //      }\n//     //  }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { url: BSMRSTU_ORG_URL, contestID: 1541 };\n    }\n\n    updateStateVars(props) {\n        try {\n            this.setState({\n                url: props.location.search.match(`url=(.+)`)[1],\n                contestID: props.match.params.contestID\n            })\n        }\n        catch (e) {\n            console.log(\"error setting rank-list-layout state\", e)\n        }\n        console.log(\"con-layout-state\", this.state)\n    }\n\n    stateChangedLah(props) {\n        try {\n            if (this.state.url !== props.location.search.match(`url=(.+)`)[1] || this.state.contestID !== props.match.params.contestID) {\n                return true\n            }\n            return false\n        }\n        catch (e) {\n            return true\n        }\n    }\n\n    componentDidMount() {\n        this.updateStateVars(this.props)\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // debugger\n        if (this.stateChangedLah(nextProps)) {\n            this.updateStateVars(nextProps)\n            return true\n        }\n        return false\n    }\n\n\n    render() {\n        console.log(\"rank-layout-rendering\", this.props)\n        return (\n            <div>\n                <CommonLayout key={\"rank-list-layout\" + this.state.url + this.state.contestID} {...this.props} url={this.state.url} contestID={this.state.contestID}>\n                    <RankList key={\"rank-list-\" + this.state.url + this.state.contestID} {...this.props} url={this.state.url} contestID={this.state.contestID} ></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Link } from 'react-router-dom'\nimport React from 'react';\nimport { ToggleButton } from 'react-bootstrap';\n\nclass ContestRow extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     data: null,\n        //     selected: false,\n        // }\n    }\n\n    render(){\n        console.log(\"rendering-row\", this.props)\n        \n        if(this.props.data == null) {\n            return <tr><td>called with null</td></tr>\n        }\n\n        var data = this.props.data\n\n        return (<tr>\n            <td textalign=\"left\">{data.name}</td>\n            <td textalign=\"left\">{data.id}</td>\n            <td ><Link to={'/selector/contests/' + data.id + '?url=' + this.props.url}><p ref={this.props.innerRef} >{this.props.selected ? \"SELECTED\" : \"select\"}</p></Link></td>\n        </tr>\n        )\n    }\n\n    // componentDidMount() {\n    //     this.setState({\n    //         data: this.props.data,\n    //         selected: selected\n    //     })\n    // }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // if (nextState.data != null) {\n        //     return true\n        // }\n        if (nextProps !== null && this.props !== null && nextProps.selected === this.props.selected) {\n            return false\n        }\n        return true\n    }\n}\n\n\nexport default React.forwardRef((props, ref) => <ContestRow\n    innerRef={ref} {...props}\n/>);","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport ContestRow from \"./ContestRow\"\nimport Navigation from \"./Navigation\"\nimport React, { useDebugValue } from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ContestList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\n\n\nfunction RowConatiner({ searchStr, children}){\n    return React.Children.toArray(children).filter( (child) =>{\n        return !searchStr || searchStr == \"\" || child.props.data.name.toLowerCase().includes(searchStr.toLowerCase())\n    })\n}\n\n\nclass ContestList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, loading: true, needRetry: true, failed: false, searchStr:\"\" };\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n     \n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n        var cf = this.state.data\n         return <div key=\"contests-list-div\" >\n            <div className=\"contests\" key=\"contests-div\">\n                <Table key = 'contests-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                        <tr>\n                            <th>Contest Tittle</th>\n                            <th>ID</th>\n\n                            <th ><FormControl autoFocus\n                                 className=\"mx-3 my-2 w-auto\"\n                                 textalign=\"right\"\n                                 placeholder=\"Filter by Tittle\" defaultValue={this.state.searchStr} \n                                 onMouseMove={(e) => {\n                                     if(this.state.searchStr != e.target.value){\n                                        return this.setState({searchStr: e.target.value})\n                                     }\n                                    }} \n                                ></FormControl></th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                         <RowConatiner key={\"search-str\" +this.state.searchStr} searchStr={this.state.searchStr}>\n                             {cf.map((r, i) =>{\n                                if( r.phase === \"BEFORE\" ){\n                                    return\n                                }\n                                \n                                if (!(r.id in this.refID)){\n                                    this.selectRef.push(React.createRef())\n                                    this.refID[r.id] = this.selectRef.length - 1                                    \n                                }\n                                \n                                \n                                var elm = <ContestRow ref={this.selectRef[this.refID[r.id]]} key={i} data={r} url={this.props.url} selected={r.id == this.props.contestID}/>\n                                return elm\n                                })}\n                        </RowConatiner>\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"contests-data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n    }\n\n     componentDidMount() {\n        this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextProps != null && ( nextProps.url != this.props.url || nextProps.contestID != this.props.contestID)){\n            try {\n                this.selectRef[this.refID[Number(nextProps.contestID)]].current.innerText = \"SELECTED\"\n                this.selectRef[this.refID[Number(this.props.contestID)]].current.innerText = \"select\"\n            } catch(e){ // may fail due to filter \n\n            }\n            return false\n        }\n        if(nextState && nextState.searchStr != this.state.searchStr){\n            return true\n        }\n        return false\n    }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass ContestListLayout extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    urlAndContestID(props){\n        return {\n            url: props.location.search.match(`url=(.+)`)[1],\n            contestID : props.match.params.contestID\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        var p1 = this.urlAndContestID(nextProps)\n        var p2 = this.urlAndContestID(this.props)\n        if (p1 !== null && p2 !== null && p1.url === p2.url && p1.contestID === p2.contestID){\n            return false\n        }\n        return true\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...this.urlAndContestID(this.props)}>\n                    <ContestList key=\"con-list\" {...this.props} {...this.urlAndContestID(this.props)}></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport Navigation from './Navigation'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useState } from 'react'\n\n\nexport default function AppContainer(){\n    return <HashRouter key='hash-router'>\n        {/* <Switch>\n            <Route path=\"/selector/contests/:contestID\" component={Navigation} />\n            <Route path=\"/contest/:contestID\" component={Navigation} />\n            <Route path=\"/\" component={Navigation} />\n        </Switch>\n\n        <Navigation url={url} contestID={contestID}/> */}\n        <div className=\"Switch-Route-Block\" key='switch-route-block'>\n            <Switch key='switch-route-sw'>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route key='route-contest-list' path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout key=\"contest-list-layout\" {...props}/>} />\n                <Route key='route-rank-list' path=\"/contest/:contestID\" render={(props) => <RankListLayout key=\"single-rank-instance\" {...props}/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\" component={ContestListLayout} />\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer key='app-conatiner'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}