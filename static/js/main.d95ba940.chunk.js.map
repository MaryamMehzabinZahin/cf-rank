{"version":3,"sources":["components/RankRow.js","lib/UrlInfo.js","lib/Goto.js","components/Navigation.js","lib/ParseUser.js","logo.svg","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestRow.js","components/ContestList.js","components/ContestListLayout.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RankRow","data","rowid","className","style","rank","party","members","map","m","handle","points","problemResults","r","rejectedAttemptCount","bestSubmissionTimeSeconds","Date","toISOString","substr","getQueryVariable","search","variable","vars","substring","split","i","length","pair","decodeURIComponent","UrlInfo","props","handles","location","slice","parsedHandles","url","contestID","match","params","unofficial","HashFromURL","str","hash","charCodeAt","getHashCode","toString","SameUrl","prop1","prop2","BuildUrl","to","nextPath","undefined","GetRanklistUrl","Navigation","rUrl","rContestID","rHandles","rUnofficial","useState","setUrl","setContestID","setHandles","setUnofficial","invisible","setInvisible","InputJSX","Form","Label","htmlFor","srOnly","FormControl","size","id","placeholder","value","onChange","e","target","type","checked","Button","Navbar","bg","variant","Nav","Link","href","active","pathname","startsWith","disabled","onClick","ProxyHost","ParseCFUsersFromRank","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","CONTEST_FINISHED","RankList","_isMounted","h","state","loading","needRetry","failed","renderCount","users","errored","this","status","json","result","contest","phase","setState","relativeTimeSeconds","durationSeconds","percent","Math","round","colSpan","ProgressBar","now","animated","invalidArgs","Spinner","width","height","animation","role","cf","src","logo","alt","name","Table","responsive","striped","bordered","displayProgressBar","problems","p","index","rows","ParseCFUsersFromURL","history","push","actionFetchRanks","parseHandles","parseRankInterval","setInterval","setRefreshIfNecessary","clearInterval","interval","nextProps","nextState","React","Component","CommonLayout","children","RankListLayout","ContestRow","ref","innerRef","selected","textAlign","forwardRef","CF_CONTESTS_URL","gym","RowConatiner","searchStr","Children","toArray","filter","child","toLowerCase","includes","ContestList","selectRef","refID","forceUpdate","defaultValue","createRef","actionFetchContests","alert","repeatedWork","Number","current","innerText","ContestListLayout","AppContainer","path","render","from","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d95ba940.chunk.js","sourcesContent":["import React from 'react'\nimport './RankRow.css'\n\nexport default function RankRow({data, rowid}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr className=\"rank-font\">\n        <td style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >{data.rank > 0 && rowid}</span></td>\n        <td style={{ \"text-align\": \"center\" }}>{data.rank > 0 && data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.party.members.map(m => m.handle + \" \")}</td>\n        <td >{data.points}</td>\n        <td ></td>\n        {data.problemResults.map(r => {\n            return <td>\n                <span className=\"cell-points\">{r.points > 0 && r.points}  <span className=\"cell-rejected\">{r.rejectedAttemptCount > 0 && -r.rejectedAttemptCount}</span></span>\n                \n                <span className=\"cell-time\">{r.bestSubmissionTimeSeconds && new Date(r.bestSubmissionTimeSeconds * 1000).toISOString().substr(11, 8)}</span>\n            </td>\n        })}\n    </tr>)\n}\n","\n\nfunction getQueryVariable(search, variable) {\n    var query = search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) == variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return \"\"\n}\n\n\nfunction getHashCode(str) {\n    var hash = 0, i, chr;\n    if (str.length === 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\nexport function UrlInfo(props){\n    let handles = getQueryVariable(props.location.search, \"handles\")\n    if(handles.length > 0 && handles.slice(-1) != \";\"){\n        handles = handles + \";\"\n    }\n\n    let parsedHandles = getQueryVariable(props.location.search, \"parsedHandles\")\n    if (parsedHandles.length > 0 && parsedHandles.slice(-1) != \";\") {\n        parsedHandles = parsedHandles + \";\"\n    }\n\n    return {\n        url: getQueryVariable(props.location.search, \"url\"),\n        contestID: props.match.params.contestID,\n        handles: handles,\n        parsedHandles: parsedHandles,\n        unofficial: getQueryVariable(props.location.search, \"unofficial\") == \"true\"\n    }\n}\n\nexport function HashFromURL(props){\n    const {url, contestID, handles, parsedHandles, unofficial} = UrlInfo(props)\n    return getHashCode(url + contestID + handles + parsedHandles + unofficial.toString())\n}\n\n\nexport function SameUrl(prop1, prop2){\n    return HashFromURL(prop1) == HashFromURL(prop2)\n}\n\nexport function BuildUrl(to, contestID, url, handles, parsedHandles, unofficial){\n    debugger\n\n    let nextPath = to\n    if (nextPath.length > 0 && nextPath.slice(-1)!= \"/\")\n    {\n        nextPath = nextPath + \"/\"\n    }\n    if(!contestID) {\n        contestID = \"1541\"\n    }\n    nextPath = nextPath + contestID + \"?\"\n    if(url !== \"\"  && url != undefined){\n        nextPath = nextPath + \"url=\" + url + \"&\"\n    } else {\n        parsedHandles = \"\"\n    }\n\n    if(unofficial && unofficial.toString() == \"true\"){\n        nextPath = nextPath + \"unofficial=true&\"\n    }\n\n\n    if (handles !== \"\" && handles != undefined) {\n        nextPath =  nextPath + \"handles=\" + handles + \"&\"\n    }\n\n    if (parsedHandles !== \"\" && parsedHandles != undefined) {\n        nextPath = nextPath + \"parsedHandles=\" + parsedHandles + \"&\"\n    }\n\n    if (nextPath.length > 0 && nextPath.slice(-1) === \"&\") {\n        nextPath = nextPath.slice(0, -1);\n    }\n    return nextPath\n}","import { BuildUrl, UrlInfo } from \"./UrlInfo\";\n\nexport function GetRanklistUrl(contestID, url, handles, parsedHandles, unofficial){\n    return BuildUrl(\"/contest\", contestID, url, handles, parsedHandles, unofficial)\n}","import Input from './Input'\nimport { useLocation } from 'react-router';\n\nimport { useState, useEffect } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, Navbar, Nav, ToggleButton} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport \"./Navigation.css\"\nimport {BuildUrl} from \"../lib/UrlInfo\"\nimport {GetRanklistUrl} from \"../lib/Goto\"\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n    var rHandles = props.handles\n    var rUnofficial = props.unofficial\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n    const [handles, setHandles] = useState(rHandles)\n    const [unofficial, setUnofficial] = useState(rUnofficial)\n    const [invisible, setInvisible] = useState(false)\n\n    debugger\n\n    var InputJSX = <div className={invisible? \"hide-me\":\"parent-input-div one-elm-flex\"}>\n        <Form key={rUrl + rContestID} className=\"width-hundred one-elm-flex\">\n            <div className=\"width-hundred flex-input-div\">\n                \n                <div className=\"handles-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        Handles\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"handles seperated by ;\"\n                        // defaultValue={rHandles}\n                        value={handles}\n                        onChange={e => setHandles(e.target.value)}\n                    // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"url-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url\"\n                        // defaultValue={rUrl}\n                        value={url}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n                <div className=\"contest-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput2\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0\"\n                        id=\"inlineFormInput2\"\n                        placeholder=\"ContestID\"\n                        value={contestID}\n                        onChange={\n                            (e) => {\n                                debugger\n                                setContestID(e.target.value)\n                            }\n                        }\n                    />\n                </div>\n               \n                <div className=\"unofficial-div min-width one-elm-flex\">\n                    <input type=\"checkbox\" className=\"btn-light\" checked={unofficial} onChange={e=>{\n                        setUnofficial(e.target.checked)\n                    }}/> <label>unofficial</label>\n                </div>\n\n                <div className=\"button-div min-width one-elm-flex\">\n                    <Link to={GetRanklistUrl( contestID, url, handles, props.parsedHandles, unofficial)}>\n                        <Button type=\"submit\" className=\"mb-0 btn-light\" size=\"sm\">\n                            Load\n                        </Button>\n                    </Link>\n                </div>\n            </div>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className='navbar-expand-sm'>\n        <Nav className=\"mr-auto width-hundred\">\n            <Nav.Link href={BuildUrl(\"#selector/contests/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n\n            <div className=\"one-elm-flex\"><input type=\"checkbox\" className=\"one-elm-flex\" onClick={e => setInvisible(e.target.checked)} value={invisible} /></div>\n            {InputJSX}\n        </Nav>\n\n        \n    </Navbar>\n    </div>\n\n}","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nexport default async function ParseCFUsersFromRank(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n        //debugger\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n        return \"\"\n    });\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button, ProgressBar } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\nimport { GetRanklistUrl} from \"../lib/Goto\"\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id, unofficial) => `/contest.standings?showUnofficial=`+ unofficial +`&contestId=`+id+`&handles=`\n\nconst CONTEST_FINISHED = \"FINISHED\"\n\n\n\nfunction GetContestStatusText(status){\n    if(status === CONTEST_FINISHED){\n        return \"Final Standing\"\n    }\n\n    if (status === \"PENDING_SYSTEM_TEST\") {\n        return \"Pending System Test\"\n    }\n\n    if (status === \"SYSTEM_TEST\") {\n        return \"System Testing\"\n    }\n\n    if (status === \"CODING\") {\n        return \"Contest is Running\"\n    }\n}\n\n class RankList extends React.Component{\n     _isMounted = false\n\n    constructor(props) {\n        super(props);\n        let h = props.handles;\n        if(props.url !== \"\"){\n            h = h + props.parsedHandles\n        }\n        this.state = { data: null, loading:true, needRetry:true, failed:false, handles: h, renderCount: 0 };\n    }\n\n    async actionFetchRanks(users){\n        var errored = false\n        const url = CF_API + CF_STANDING_URL(this.props.contestID, this.props.unofficial) + users\n        console.log(\"Fetching\", url)\n        const resp = await fetch(url).\n            catch(err => {\n                console.log(err);\n                errored = true\n                return\n            });\n\n        if (errored) {\n            return\n        }\n\n        if (resp.status === 200) {\n            this.state.data = (await resp.json()).result\n            if (this.state.data.contest.phase == CONTEST_FINISHED) {\n                this.state.needRetry = false\n            } else {\n                this.state.needRetry = true\n            }\n        } else {\n            this.state.needRetry = false\n        }\n    \n        this.state.loading = false\n        if(this._isMounted){\n            this.setState({\n                renderCount:this.state.renderCount + 1\n            })\n        }\n        //this.forceUpdate()\n    }\n\n    displayProgressBar(relativeTimeSeconds, durationSeconds){\n        debugger\n        if(relativeTimeSeconds == undefined || durationSeconds == undefined){\n            return \n        }\n        if(relativeTimeSeconds > durationSeconds || relativeTimeSeconds < 0){\n            return\n        }\n        let percent = Math.round((relativeTimeSeconds / durationSeconds) * 100)\n        return <tr>\n            <th colSpan=\"100\">\n\n                <ProgressBar variant=\"info\" now={percent} animated ></ProgressBar>\n            </th>\n        </tr>\n    }\n\n     render(){\n         let invalidArgs = (this.props.handles == \"\") && (this.props.url == \"\")\n\n         if(invalidArgs){\n             this.state.loading = false\n         }\n         if (invalidArgs || this.state.data == null){\n\n            if (this.state.loading == false){\n                return <div>\n                        <div className=\"stopped\">\n                        <br/><br/><br/>\n                        <p>Not Available or Invalid Args!</p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        var cf = this.state.data\n        debugger\n        return <div>\n            {cf.contest.phase === CONTEST_FINISHED && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase !== CONTEST_FINISHED && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped bordered>\n                    <thead>\n                        <tr>\n                            <th colSpan=\"100\">\n                                {GetContestStatusText(cf.contest.phase)}\n                            </th>\n                        </tr>\n                        {this.displayProgressBar(cf.contest.relativeTimeSeconds, cf.contest.durationSeconds)}\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >#</span></th>\n                            <th style={{ \"text-align\": \"center\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th >Points</th>\n                            <th style={{ \"text-align\": \"left\" }}> </th>\n                            {cf.problems.map(p => <th>{p.index}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} rowid={i + 1} data={r} />) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async parseHandles() {\n        this.state.loading = true\n        return ParseCFUsersFromURL(this.props.url)\n        .then(\n            (users) => {\n                console.log(\"parsed-users\", users)\n                if(users === \"\" || users.length === this.props.parsedHandles.length){\n                    console.log(\"same as previous parsed-users. skipping\")\n                    return\n                }\n                \n                if (this._isMounted){\n                    this.props.history.push(GetRanklistUrl(this.props.contestID, this.props.url, this.props.handles, users))\n                }\n                \n            })\n    }\n\n    async setRefreshIfNecessary(){\n        if(this.state.handles !== \"\") {\n            this.actionFetchRanks(this.state.handles)\n        }\n        await this.parseHandles()\n        if (this.state.needRetry) {\n            // // handles can be just parsed one time as the handles won't likely to change much\n            // if(this.props.url !== \"\"){\n            //     this.parseHandlesInterval = setInterval(() => { this.parseHandles()}, 60000);\n            // }\n            this.parseRankInterval = setInterval(() => { this.actionFetchRanks(this.state.handles) }, 30000);\n            // debugger\n        }\n    }\n\n     componentDidMount() {\n         this.setRefreshIfNecessary().then()\n         this._isMounted = true\n     }\n     \n     componentWillUnmount() {\n         clearInterval(this.interval);\n         this._isMounted = false;\n     }\n\n     shouldComponentUpdate(nextProps, nextState) {\n         // debugger\n         if (nextState.renderCount != this.state.renderCount) {\n             return true\n         }\n         if (nextState.handles != this.state.handles) {\n             this.actionFetchRanks(nextState.handles)\n             return false\n         }\n         return false\n     }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nimport { UrlInfo, HashFromURL, SameUrl } from \"../lib/UrlInfo\"\n\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"rank-layout-rendering\", this.props)\n        return (\n            <div>\n                <CommonLayout key=\"rank-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <RankList key={\"rank-list\" + HashFromURL(this.props)} {...this.props} {...UrlInfo(this.props)}></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Link } from 'react-router-dom'\nimport React from 'react';\nimport { ToggleButton } from 'react-bootstrap';\nimport {BuildUrl} from \"../lib/UrlInfo\"\n\nclass ContestRow extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     data: null,\n        //     selected: false,\n        // }\n    }\n\n    render(){\n        console.log(\"rendering-row\", this.props)\n        \n        if(this.props.data == null) {\n            return <tr><td>called with null</td></tr>\n        }\n\n        var data = this.props.data\n\n        return (<tr>\n            <td ><Link to={BuildUrl('/selector/contests/', data.id, this.props.url, this.props.handles, this.props.parsedHandles, this.props.unofficial)}><p ref={this.props.innerRef} >{this.props.selected ? \"SELECTED\" : \"select\"}</p></Link></td>\n            <td textAlign=\"left\">{data.name}</td>\n            <td textAlign=\"left\">{data.id}</td>\n            <td textAlign=\"center\"><a href={\"https://codeforces.com/contest/\" + data.id} target=\"_blank\">link</a></td>\n        </tr>\n        )\n    }\n\n    // componentDidMount() {\n    //     this.setState({\n    //         data: this.props.data,\n    //         selected: selected\n    //     })\n    // }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // if (nextState.data != null) {\n        //     return true\n        // }\n        if (nextProps !== null && this.props !== null && nextProps.selected === this.props.selected) {\n            return false\n        }\n        return true\n    }\n}\n\n\nexport default React.forwardRef((props, ref) => <ContestRow\n    innerRef={ref} {...props}\n/>);","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport ContestRow from \"./ContestRow\"\nimport Navigation from \"./Navigation\"\nimport React, { useDebugValue } from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ContestList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\n\n\nfunction RowConatiner({ searchStr, children}){\n    return React.Children.toArray(children).filter( (child) =>{\n        return !searchStr || searchStr == \"\" || child.props.data.name.toLowerCase().includes(searchStr.toLowerCase())\n    })\n}\n\n\nclass ContestList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, loading: true, needRetry: true, failed: false, searchStr:\"\", renderCount:0 };\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n     \n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n        var cf = this.state.data\n         return <div key=\"contests-list-div\" >\n            <div className=\"contests\" key=\"contests-div\">\n                <Table key = 'contests-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                         <tr>\n                             <th colSpan=\"2\">\n                                 <div className=\"filter-container\">\n                                    <div>\n                                        <FormControl \n                                            className=\"sm\"\n                                            placeholder=\"Filter by Tittle\" defaultValue={this.state.searchStr}\n                                            onChange={e=> this.state.searchStr = e.target.value}   \n                                        ></FormControl>\n                                    </div>\n                                    <div>\n                                        <Button type=\"submit\" className=\"btn-light\" onClick={(e) => {\n                                            debugger\n                                            if (this.state.searchStr != \"\") {\n                                                return this.setState({ renderCount: this.state.renderCount + 1 })\n                                            }\n                                        }}>\n                                        Filter\n                                    </Button>\n                                    </div>\n                                 </div>\n\n                            </th>\n                        </tr>\n\n                        <tr>\n                            <th></th>\n                            <th>Contest Tittle</th>\n                            <th>ID</th>\n                            <th>Codeforces</th>\n                        </tr>\n\n\n                    </thead>\n                    <tbody>\n                         <RowConatiner key={\"search-str\" +this.state.searchStr} searchStr={this.state.searchStr}>\n                             {cf.map((r, i) =>{\n                                if( r.phase === \"BEFORE\" ){\n                                    return\n                                }\n                                \n                                if (!(r.id in this.refID)){\n                                    this.selectRef.push(React.createRef())\n                                    this.refID[r.id] = this.selectRef.length - 1                                    \n                                }\n                                \n                                \n                                 var elm = <ContestRow ref={this.selectRef[this.refID[r.id]]} key={i} data={r} url={this.props.url} handles={this.props.handles} parsedHandles={this.props.parsedHandles} selected={r.id == this.props.contestID}/>\n                                return elm\n                                })}\n                        </RowConatiner>\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"contests-data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n    }\n\n     componentDidMount() {\n        this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextProps != null && ( nextProps.url != this.props.url || nextProps.contestID != this.props.contestID)){\n            try {\n                this.selectRef[this.refID[Number(nextProps.contestID)]].current.innerText = \"SELECTED\"\n                this.selectRef[this.refID[Number(this.props.contestID)]].current.innerText = \"select\"\n            } catch(e){ // may fail due to filter \n\n            }\n            return false\n        }\n        if(nextState && nextState.searchStr != this.state.searchStr || this.state.renderCount != nextState.renderCount){\n            return true\n        }\n        return false\n    }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass ContestListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <ContestList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport Navigation from './Navigation'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useState } from 'react'\n\n\nexport default function AppContainer(){\n    return <HashRouter key='hash-router'>\n        <div className=\"Switch-Route-Block\" key='switch-route-block'>\n            <Switch key='switch-route-sw'>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route key='route-contest-list' path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout key=\"contest-list-layout\" {...props}/>} />\n                <Route key='route-rank-list' path=\"/contest/:contestID\" render={(props) => <RankListLayout key=\"single-rank-instance\" {...props}/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\" component={ContestListLayout} />\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer key='app-conatiner'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}