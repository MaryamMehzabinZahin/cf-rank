{"version":3,"sources":["components/Row.js","lib/ParseUser.js","logo.svg","components/RankList.js","App.js","reportWebVitals.js","index.js"],"names":["Row","data","rowID","style","rank","party","members","map","m","handle","points","problemResults","r","ProxyHost","url","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","RankList","props","state","users","errored","CF_API","status","json","this","result","forceUpdate","body","alert","message","rows","length","className","Spinner","width","height","animation","role","cf","contest","phase","src","logo","alt","name","Table","variant","size","responsive","striped","problems","p","index","i","actionFetchRanks","interval","setInterval","ParseCFUsersFromURL","e","clearInterval","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.178de366.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Row({data, rowID}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr>\n        <td style={{ \"text-align\": \"left\" }}>{rowID}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.party.members.map(m => m.handle + \" \")}</td>\n        <td >{data.points}</td>\n        <td ></td>\n        {data.problemResults.map(r => <td>{r.points}</td>)}\n    </tr>)\n}\n","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nexport default async function ParseCFUsersFromRank(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n        //debugger\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Row from \"./Row\"\nimport React from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport {Spinner, Table} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = `/contest.standings?contestId=1541&handles=`\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\n class RankList extends React.Component{\n\n     constructor(props) {\n        super(props);\n        this.state = { data: null };\n     }\n\n     async actionFetchRanks(users){\n         var errored = false\n         const url = CF_API + CF_STANDING_URL + users\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n             \n             this.forceUpdate()\n         } else {\n             const body = await resp.json()\n             alert(body.message)\n         }\n     }\n\n\n     render(){\n         if (this.state.data == null || this.state.data.rows.length == 0){\n            return <div className=\"loading\">\n                <Spinner style={{width:\"100px\", height:\"100px\"}} animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n                <p>Constructing Ranklist...</p>\n            </div>\n        }\n\n        var cf = this.state.data\n        return <div>\n            {cf.contest.phase == \"FINISHED\" && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase != \"FINISHED\" && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}>#</th>\n                            <th style={{ \"text-align\": \"left\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th >Points</th>\n                            <th style={{ \"text-align\": \"left\"}}> </th>\n                            {cf.problems.map(p => <th>{p.index}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <Row key={i} rowID={i + 1} data={r} />) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n     componentDidMount() {\n         this.actionFetchRanks()\n         this.interval = setInterval(() => {\n             ParseCFUsersFromURL(BSMRSTU_ORG_URL)\n             .then(\n                (users) => {\n                    console.log(\"users\", users)\n                    this.actionFetchRanks(users).catch(alert)\n                })\n            .catch(e => alert(e))\n             }, 10000);\n     }\n     componentWillUnmount() {\n         clearInterval(this.interval);\n     }\n}\n\nexport default RankList;\n\n","import './App.css';\nimport RankList from './components/RankList'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RankList key = \"cf-rank\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}