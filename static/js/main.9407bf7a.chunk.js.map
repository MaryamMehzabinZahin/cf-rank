{"version":3,"sources":["components/RankRow.js","lib/UrlInfo.js","lib/Goto.js","components/Navigation.js","lib/CF.js","logo.svg","lib/Handles.js","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestRow.js","components/ContestList.js","components/ContestListLayout.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["validStr","str","undefined","RankRow","data","localRank","userInfo","getUserRank","handle","rank","mainContent","r","className","points","bestSubmissionTimeSeconds","Date","toISOString","substr","rejectedCount","rejectedAttemptCount","style","party","participantType","members","map","m","replace","target","href","title","firstName","lastName","penalty","problemResults","getQueryVariable","search","variable","vars","substring","split","i","length","pair","decodeURIComponent","UrlInfo","props","handles","location","slice","parsedHandles","url","contestID","match","params","unofficial","HashFromURL","hash","charCodeAt","getHashCode","toString","SameUrl","prop1","prop2","BuildUrl","to","nextPath","GetRanklistUrl","Navigation","rUrl","rContestID","rHandles","rUnofficial","useState","setUrl","setContestID","setHandles","setUnofficial","invisible","setInvisible","InputJSX","Form","Label","htmlFor","srOnly","FormControl","size","id","placeholder","value","onChange","e","type","checked","Button","Navbar","bg","variant","Nav","Link","active","pathname","startsWith","disabled","onClick","ProxyHost","CF_API","CF_STANDING_URL","users","CF_USER_INFO","ParseCFUsersFromURL","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","FetchRanks","errored","status","json","result","FetchUserInfo","StringToHandleSet","Set","UniqueParsedHandles","hParsed","oldHandles","ph","oh","diff","setA","setB","_difference","elem","delete","setDifference","cnt","unq","join","tot","IsSameHandles","ha","hb","as","bs","has","eqSet","CONTEST_FINISHED","RankList","_isMounted","h","state","loading","needRetry","failed","renderCount","this","contest","phase","setState","mp","pageID","promises","push","Promise","all","pHandles","table","total","urls","parseHandlesFromSingleURLAndPages","parseHandlesFromAllUrls","totalHandles","uniqueHandles","uniqueCount","history","actionFetchRanks","actionFetchUserInfo","parseHandles","parseRankInterval","setInterval","clearInterval","setRefreshIfNecessary","nextProps","nextState","relativeTimeSeconds","durationSeconds","percent","Math","round","colSpan","ProgressBar","now","animated","invalidArgs","Spinner","width","height","animation","role","cf","lastRank","currentRank","rows","src","logo","alt","name","Table","responsive","striped","bordered","displayProgressBar","problems","p","rating","index","React","Component","CommonLayout","children","RankListLayout","ContestRow","ref","innerRef","selected","textAlign","forwardRef","CF_CONTESTS_URL","gym","RowConatiner","searchStr","Children","toArray","filter","child","toLowerCase","includes","ContestList","selectRef","refID","forceUpdate","defaultValue","createRef","renderContests","actionFetchContests","alert","repeatedWork","Number","current","ContestListLayout","AppContainer","path","render","from","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4cAOA,SAASA,EAASC,GACd,YAAWC,IAARD,GAA6B,OAARA,EACb,GACJA,EAGI,SAASE,EAAT,GAA8C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,SAE9C,GAAW,MAARF,EACC,OAAO,6BAAI,oDAGf,IAAMG,EAAc,SAACC,GACjB,OAAIA,KAAUF,EACHA,EAASE,GAAQC,KAErB,IAULC,EAAc,SAACC,GAAD,OAAO,sBAAKC,UAAU,oBAAf,UACvB,uBAAMA,UAAU,cAAhB,UAA+BD,EAAEE,OAAjC,OACA,sBAAMD,UAAU,YAAhB,SAA6BD,EAAEG,2BAA6B,IAAIC,KAAmC,IAA9BJ,EAAEG,2BAAkCE,cAAcC,OAAO,GAAI,SAGhIC,EAAgB,SAACP,GAAD,OAAO,sBAAMC,UAAU,gBAAhB,UAAkCD,EAAEQ,wBAEjE,OAAQ,qBAAIP,UAAU,YAAd,UACJ,oBAAIQ,MAAO,CAAE,aAAc,QAA3B,SAAqC,sBAAMR,UAAU,YAAhB,SAA8BR,EAAKK,KAAO,GAAKJ,MACpF,oBAAIe,MAAO,CAAE,aAAc,UAA3B,SAAwChB,EAAKK,KAAO,GAAKL,EAAKK,OAC9D,oBAAIW,MAAO,CAAE,aAAc,QAA3B,SAAqC,sBAAKR,UAAU,kBAAf,UACD,eAA/BR,EAAKiB,MAAMC,iBAAoC,sBAAMF,MAAO,CAAE,MAAS,QAAxB,eAC/ChB,EAAKiB,MAAME,QAAQC,KAAI,SAAAC,GAAC,OACzB,sBAAKb,UAAW,WAzCDH,EAyCgCF,EAAYkB,EAAEjB,QAzCrCC,EAAKiB,QAAQ,MAAO,KAyC5C,cAAwE,mBAAGC,OAAO,SAASC,KAAM,kCAAoCH,EAAEjB,OAAQqB,MAAOtB,EAAYkB,EAAEjB,QAAU,KApB7JA,EAoBmLiB,EAAEjB,OAnBtMA,KAAUF,EACCN,EAASM,EAASE,GAAQsB,WAAa,IAAO9B,EAASM,EAASE,GAAQuB,UAEhF,IAgBqE,SACpE,oCAAM,sBAAMnB,UAAU,cAAhB,SAA+Ba,EAAEjB,OAAOS,OAAO,EAAG,KAAYQ,EAAEjB,OAAOS,OAAO,GAApF,YArBY,IAACT,EArBFC,KAsCkB,SAQrC,+BAAK,sBAAMoB,MAAM,SAAZ,SAAsBzB,EAAKS,SAAhC,IAAiDT,EAAKK,KAAO,GAAKL,EAAK4B,QAAU,GAAO,uBAAMH,MAAM,UAAUjB,UAAU,gBAAhC,UAAiDR,EAAK4B,QAAtD,UACxF,uBACC5B,EAAK6B,eAAeT,KAAI,SAAAb,GACrB,OAAO,6BACH,sBAAKC,UAAU,gBAAf,UACKD,EAAEE,OAAS,GAAM,qBAAKD,UAAU,sBAChCD,EAAEE,OAAS,GAAKH,EAAYC,GAC7B,qBAAKC,UAAU,oBAAf,SAAoCD,EAAEQ,qBAAuB,GAAKD,EAAcP,gB,kECxDpG,SAASuB,EAAiBC,EAAQC,GAG9B,IAFA,IACIC,EADQF,EAAOG,UAAU,GACZC,MAAM,KACdC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CAClC,IAAIE,EAAOL,EAAKG,GAAGD,MAAM,KACzB,GAAII,mBAAmBD,EAAK,KAAON,EAC/B,OAAOO,mBAAmBD,EAAK,IAGvC,MAAO,GAeJ,SAASE,EAAQC,GACpB,IAAIC,EAAUZ,EAAiBW,EAAME,SAASZ,OAAQ,WACnDW,EAAQL,OAAS,GAA0B,KAArBK,EAAQE,OAAO,KACpCF,GAAoB,KAGxB,IAAIG,EAAgBf,EAAiBW,EAAME,SAASZ,OAAQ,iBAK5D,OAJIc,EAAcR,OAAS,GAAgC,KAA3BQ,EAAcD,OAAO,KACjDC,GAAgC,KAG7B,CACHC,IAAKhB,EAAiBW,EAAME,SAASZ,OAAQ,OAC7CgB,UAAWN,EAAMO,MAAMC,OAAOF,UAC9BL,QAASA,EACTG,cAAeA,EACfK,WAAqE,QAAzDpB,EAAiBW,EAAME,SAASZ,OAAQ,eAIrD,SAASoB,EAAYV,GACxB,MAA6DD,EAAQC,GACrE,OAjCJ,SAAqB5C,GACjB,IAAcuC,EAAVgB,EAAO,EACX,GAAmB,IAAfvD,EAAIwC,OAAc,OAAOe,EAC7B,IAAKhB,EAAI,EAAGA,EAAIvC,EAAIwC,OAAQD,IAExBgB,GAASA,GAAQ,GAAKA,EADhBvD,EAAIwD,WAAWjB,GAErBgB,GAAQ,EAEZ,OAAOA,EAyBAE,CADP,EAAOR,IAAP,EAAYC,UAAZ,EAAuBL,QAAvB,EAAgCG,cAAhC,EAA+CK,WAC2BK,YAIvE,SAASC,EAAQC,EAAOC,GAC3B,OAAOP,EAAYM,IAAUN,EAAYO,GAGtC,SAASC,EAASC,EAAIb,EAAWD,EAAKJ,EAASG,EAAeK,GACjE,IAAIW,EAAWD,EA+Bf,OA9BIC,EAASxB,OAAS,GAA0B,KAArBwB,EAASjB,OAAO,KAEvCiB,GAAsB,KAEtBd,IACAA,EAAY,QAEhBc,EAAWA,EAAWd,EAAY,IACvB,KAARD,QAAsBhD,GAAPgD,EACde,EAAWA,EAAW,OAASf,EAAM,IAErCD,EAAgB,GAGjBK,GAAuC,QAAzBA,EAAWK,aACxBM,GAAsB,oBAIV,KAAZnB,QAA6B5C,GAAX4C,IAClBmB,EAAYA,EAAW,WAAanB,EAAU,KAG5B,KAAlBG,QAAyC/C,GAAjB+C,IACxBgB,EAAWA,EAAW,iBAAmBhB,EAAgB,KAGzDgB,EAASxB,OAAS,GAA4B,MAAvBwB,EAASjB,OAAO,KACvCiB,EAAWA,EAASjB,MAAM,GAAI,IAE3BiB,ECtFJ,SAASC,EAAef,EAAWD,EAAKJ,EAASG,EAAeK,GACnE,OAAOS,EAAS,WAAYZ,EAAWD,EAAKJ,EAASG,EAAeK,GCSzD,SAASa,EAAWtB,GAC/B,IAAIuB,EAAOvB,EAAMK,IACbmB,EAAaxB,EAAMM,UACnBmB,EAAWzB,EAAMC,QACjByB,EAAc1B,EAAMS,WAGxB,EAAsBkB,mBAASJ,GAA/B,mBAAOlB,EAAP,KAAYuB,EAAZ,KACA,EAAkCD,mBAASH,GAA3C,mBAAOlB,EAAP,KAAkBuB,EAAlB,KACA,EAA8BF,mBAASF,GAAvC,mBAAOxB,EAAP,KAAgB6B,EAAhB,KACA,EAAoCH,mBAASD,GAA7C,mBAAOjB,EAAP,KAAmBsB,EAAnB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEIC,EAAW,qBAAKnE,UAAWiE,EAAW,UAAU,gCAArC,SACX,cAACG,EAAA,EAAD,CAA8BpE,UAAU,6BAAxC,SACI,sBAAKA,UAAU,+BAAf,UAEI,sBAAKA,UAAU,qCAAf,UACI,cAACoE,EAAA,EAAKC,MAAN,CAAYC,QAAQ,kBAAkBC,QAAM,EAA5C,qBAGA,cAACC,EAAA,EAAD,CACIC,KAAK,KACLzE,UAAU,iBACV0E,GAAG,kBACHC,YAAY,yBAEZC,MAAO1C,EACP2C,SAAU,SAAAC,GAAC,OAAIf,EAAWe,EAAE/D,OAAO6D,aAK3C,sBAAK5E,UAAU,iCAAf,UACI,cAACoE,EAAA,EAAKC,MAAN,CAAYC,QAAQ,kBAAkBC,QAAM,EAA5C,iBAGA,cAACC,EAAA,EAAD,CACIC,KAAK,KACLzE,UAAU,iBACV0E,GAAG,kBACHC,YAAY,0CAEZC,MAAOtC,EACPuC,SAAU,SAAAC,GAAC,OAAIjB,EAAOiB,EAAE/D,OAAO6D,aAIvC,sBAAK5E,UAAU,qCAAf,UACI,cAACoE,EAAA,EAAKC,MAAN,CAAYC,QAAQ,mBAAmBC,QAAM,EAA7C,uBAGA,cAACC,EAAA,EAAD,CACIC,KAAK,KACLzE,UAAU,OACV0E,GAAG,mBACHC,YAAY,YACZC,MAAOrC,EACPsC,SACI,SAACC,GACGhB,EAAagB,EAAE/D,OAAO6D,aAMtC,sBAAK5E,UAAU,wCAAf,UACI,uBAAO+E,KAAK,WAAW/E,UAAU,YAAYgF,QAAStC,EAAYmC,SAAU,SAAAC,GACxEd,EAAcc,EAAE/D,OAAOiE,YAF/B,IAGS,iDAGT,qBAAKhF,UAAU,oCAAf,SACI,cAAC,IAAD,CAAMoD,GAAIE,EAAgBf,EAAWD,EAAKJ,EAASD,EAAMI,cAAeK,GAAxE,SACI,cAACuC,EAAA,EAAD,CAAQF,KAAK,SAAS/E,UAAU,iBAAiByE,KAAK,KAAtD,0BA5DLjB,EAAOC,KAsEtB,OAAO,8BACH,cAACyB,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOpF,UAAU,mBAA3C,SACA,eAACqF,EAAA,EAAD,CAAKrF,UAAU,wBAAf,UACI,cAACqF,EAAA,EAAIC,KAAL,CAAUtE,KAAMmC,EAAS,sBAAuBZ,EAAWD,EAAKJ,EAASD,EAAMI,cAAeK,GAAa6C,OAAQtD,EAAME,SAASqD,SAASC,WAAW,sBAAtJ,sBACA,cAACJ,EAAA,EAAIC,KAAL,CAAUI,UAAQ,EAACH,OAAQtD,EAAME,SAASqD,SAASC,WAAW,YAA9D,sBAEA,qBAAKzF,UAAU,eAAf,SAA8B,uBAAO+E,KAAK,WAAWY,QAAS,SAAAb,GAAC,OAAIZ,EAAaY,EAAE/D,OAAOiE,UAAUJ,MAAOX,MACzGE,S,oBCvGPyB,EAAS,mCAGTC,EAAS,6BACTC,EAAkB,SAACpB,EAAIhC,EAAYqD,GAAjB,MAA2B,qCAAuCrD,EAAvC,cAAoEgC,EAApE,YAAuFqB,GACpIC,EAAe,SAACD,GAAD,MAAW,sBAAwBA,GAIjD,SAAeE,EAAtB,kC,4CAAO,WAAmC3D,GAAnC,SAAA4D,EAAA,+EACIC,MAAMP,EAAUtD,EAAK,CACxB,mBAAoB,OAEvB8D,MAAK,SAACC,GACH,OAAOA,EAASC,UACjBF,MAAK,SAAUG,GACd,IADoB,EAKhBC,GAJS,IAAIC,WAEAC,gBAAgBH,EAAM,aAAaI,cAAc,iDAE/CC,UAEfC,EAAK,YAAOL,EAASM,SAAT,oBAEZC,EAAO,GATS,cAULF,GAVK,IAUpB,IAAI,EAAJ,qBAAqB,CAAC,IAAZG,EAAW,QACjBD,EAAOA,EAAKE,OAAOD,EAAE,GAAK,MAXV,8BAapB,OAAOD,KAEVG,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAI,yBAA0BF,GAC/B,OAvBR,4C,sBA4BA,SAAeG,EAAtB,sC,4CAAO,WAA0B/E,EAAWwD,EAAOrD,GAA5C,mBAAAwD,EAAA,6DACCqB,GAAU,EACRjF,EAAMuD,EAASC,EAAgBvD,EAAWG,EAAYqD,GAC5DqB,QAAQC,IAAI,WAAY/E,GAHrB,SAIgB6D,MAAM7D,GACrB4E,OAAM,SAAAC,GACFC,QAAQC,IAAIF,GACZI,GAAU,KAPf,UAIGR,EAJH,QAWCQ,GAA2B,MAAhBR,EAAKS,OAXjB,8CAYQlI,GAZR,wBAcWyH,EAAKU,OAdhB,wCAcwBC,QAdxB,6C,sBAiBA,SAAeC,EAAtB,oC,4CAAO,WAA6B5B,EAAOrD,GAApC,mBAAAwD,EAAA,6DACCqB,GAAU,EACRjF,EAAMuD,EAASG,EAAaD,GAClCqB,QAAQC,IAAI,WAAY/E,GAHrB,SAIgB6D,MAAM7D,GACrB4E,OAAM,SAAAC,GACFC,QAAQC,IAAIF,GACZI,GAAU,KAPf,UAIGR,EAJH,QAWCQ,GAA2B,MAAhBR,EAAKS,OAXjB,8CAYQlI,GAZR,wBAcWyH,EAAKU,OAdhB,wCAcwBC,QAdxB,6C,sCCtDQ,MAA0B,iCCgClC,SAASE,EAAkB1F,GAC9B,OAAO,IAAI2F,IAAI3F,EAAQP,MAAM,MAO1B,SAASmG,EAAoBC,EAASC,GACzC,IAL8B9F,EAK1B+F,EAAKL,EAAkBG,GACvBG,EAAKN,EAAkBI,GACvBG,EAzBR,SAAuBC,EAAMC,GACzB,IAD+B,EAC3BC,EAAc,IAAIT,IAAIO,GADK,cAEdC,GAFc,IAE/B,2BAAuB,CAAC,IAAfE,EAAc,QACnBD,EAAYE,OAAOD,IAHQ,8BAK/B,OAAOD,EAoBIG,CAAeR,EAAKC,GAC/B,MAAO,CACHQ,IAAKP,EAAK1D,KACVkE,KAV0BzG,EAUHiG,EATpB,YAAIjG,GAAS0G,KAAK,KAAO,KAU5BC,IAAKX,EAAGzD,KAAO0D,EAAK1D,KAAO,GAI5B,SAASqE,EAAcC,EAAIC,GAC9B,OA1BJ,SAAeC,EAAIC,GACf,GAAID,EAAGxE,OAASyE,EAAGzE,KAAM,OAAO,EADb,oBAELwE,GAFK,IAEnB,gCAAS/C,EAAT,QAAkB,IAAKgD,EAAGC,IAAIjD,GAAI,OAAO,GAFtB,8BAGnB,OAAO,EAuBAkD,CAAMxB,EAAkBmB,GAAKnB,EAAkBoB,ICrC1D,IAAMK,EAAmB,WA+PVC,E,kDAvPX,WAAYrH,GAAQ,IAAD,uBACf,cAAMA,IAHVsH,YAAa,EAIT,IAAIC,EAAIvH,EAAMC,QAFC,MAGE,KAAdD,EAAMK,MACLkH,GAAQvH,EAAMI,eAElB,EAAKoH,MAAQ,CAAEjK,KAAM,KAAMkK,SAAQ,EAAMC,WAAU,EAAMC,QAAO,EAAO1H,QAASsH,EAAGK,YAAa,EAAGnK,SAAS,IAN7F,E,2FASnB,WAAuBqG,GAAvB,eAAAG,EAAA,sEAEqBoB,EAAWwC,KAAK7H,MAAMM,UAAWwD,EAAO+D,KAAK7H,MAAMS,YAFxE,YAIiBpD,KAFTyH,EAFR,SAKQ+C,KAAKL,MAAMjK,KAAOuH,EACd+C,KAAKL,MAAMjK,KAAKuK,QAAQC,OAASX,EACjCS,KAAKL,MAAME,WAAY,EAEvBG,KAAKL,MAAME,WAAY,GAG3BG,KAAKL,MAAME,WAAY,EAG3BG,KAAKL,MAAMC,SAAU,EAClBI,KAAKP,YACJO,KAAKG,SAAS,CACVJ,YAAYC,KAAKL,MAAMI,YAAc,IAlBjD,gD,+HAuBA,WAA0B9D,GAA1B,iBAAAG,EAAA,sEACqByB,EAAc5B,GADnC,YAEiBzG,KADTyH,EADR,SAGYmD,EAAK,GACTnD,EAAKnG,KAAI,SAAAb,GAAC,OAAImK,EAAGnK,EAAEH,QAAUG,KAC7B+J,KAAKL,MAAM/J,SAAWwK,GAEtB9C,QAAQC,IAAI,6CAGZyC,KAAKP,YACLO,KAAKG,SAAS,CACVJ,YAAaC,KAAKL,MAAMI,YAAc,IAZlD,gD,6IAiBA,WAAwCvH,GAAxC,iCAAA4D,EAAA,sDACQhE,EAAU,GACViI,EAAS,EAFjB,OAMQ,IADIC,EAAW,GACNxI,EAAI,EAAGA,GA9DY,EA8D0BA,IAClDwI,EAASC,KAAKpE,EAAoB3D,EAAM,SAAW6H,IACnDA,IARZ,gBAW6BG,QAAQC,IAAIH,GAXzC,OAWYI,EAXZ,OAaiB5I,EAAI,EAbrB,YAawBA,EAAI4I,EAAS3I,QAbrC,sBAcoCiG,EAAoB0C,EAAS5I,GAAIM,GAAnDyG,EAdlB,EAckBA,IAAKD,EAdvB,EAcuBA,IAAKG,EAd5B,EAc4BA,MACZH,EAAM,GAftB,iBAgBgBxG,GAAWyG,EAhB3B,4DAa6C/G,IAb7C,4BAsBW8G,GAAO,GAAKyB,EAAS,IAtBhC,mFA2BI/C,QAAQqD,MAAM,CAAEpD,IAAK,8BAA+B/E,IAAKA,EAAKoI,MAAO7B,EAAK3G,QAAQA,IA3BtF,kBA4BWA,GA5BX,4C,mIA+BA,WAA8BI,GAA9B,iCAAA4D,EAAA,sDACQhE,EAAU,GACVyI,EAAOrI,EAAIX,MAAM,KACjByI,EAAW,GACPxI,EAAI,EAJhB,YAImBA,EAAI+I,EAAK9I,QAJ5B,oBAKuB,KAAZ8I,EAAK/I,GALhB,iDAMQwI,EAASC,KAAKP,KAAKc,kCAAkCD,EAAK/I,KANlE,OAIoCA,IAJpC,wCASyB0I,QAAQC,IAAIH,GATrC,QAWI,IAFII,EATR,OAWY5I,EAAI,EAAGA,EAAI4I,EAAS3I,OAAQD,IAAK,EACbkG,EAAoB0C,EAAS5I,GAAIM,GAAnDyG,EAD8B,EAC9BA,IAAKD,EADyB,EACzBA,IAAKG,EADoB,EACpBA,IACbH,EAAM,IACLxG,GAAWyG,GAdvB,OAiBIvB,QAAQqD,MAAM,CAAEpD,IAAK,uBAAwBqD,MAAO7B,EAAK3G,QAAQA,IAjBrE,kBAkBWA,GAlBX,iD,wHAqBA,oCAAAgE,EAAA,8DAC0B5G,IAAnBwK,KAAK7H,MAAMK,KAAwC,KAAnBwH,KAAK7H,MAAMK,IADlD,wDAIIwH,KAAKL,MAAMC,SAAU,EAJzB,SAKwBI,KAAKe,wBAAwBf,KAAK7H,MAAMK,KALhE,UAKQJ,EALR,SAO4B4F,EAAoB5F,EAAS4H,KAAK7H,MAAMC,SAA1DyG,EAPV,EAOUA,IAAKD,EAPf,EAOeA,IAAKG,EAPpB,EAOoBA,IAEhBzB,QAAQqD,MAAM,CAAEpD,IAAK,wCAAyCqD,MAAO7B,EAAKiC,aAAc5I,EAAS6I,cAAepC,EAAKqC,YAAatC,KAGrHI,EAAcH,EAAKmB,KAAK7H,MAAMI,eAZ/C,mDAkBQyH,KAAKP,YACLO,KAAK7H,MAAMgJ,QAAQZ,KAAK/G,EAAewG,KAAK7H,MAAMM,UAAWuH,KAAK7H,MAAMK,IAAKwH,KAAK7H,MAAMC,QAASyG,EAAKmB,KAAK7H,MAAMS,aAnBzH,iD,gIAuBA,iCAAAwD,EAAA,4DAC8B,KAAvB4D,KAAKL,MAAMvH,UACV4H,KAAKoB,iBAAiBpB,KAAKL,MAAMvH,SACjC4H,KAAKqB,oBAAoBrB,KAAKL,MAAMvH,UAH5C,SAKU4H,KAAKsB,eALf,OAMQtB,KAAKL,MAAME,YACXG,KAAKuB,kBAAoBC,aAAY,WAAQ,EAAKJ,iBAAiB,EAAKzB,MAAMvH,WAAY,MAPlG,gD,wFAUA,WACIqJ,cAAczB,KAAKuB,mBACnBvB,KAAKP,YAAa,I,+BAGtB,WACIO,KAAK0B,wBAAwBpF,OAC7B0D,KAAKP,YAAa,I,mCAKtB,SAAsBkC,EAAWC,GAC7B,OAAIA,EAAU7B,aAAeC,KAAKL,MAAMI,aAGpC6B,EAAUxJ,SAAW4H,KAAKL,MAAMvH,UAChC4H,KAAKoB,iBAAiBQ,EAAUxJ,UACzB,K,gCAMf,SAAmByJ,EAAqBC,GACpC,QAA2BtM,GAAvBqM,QAAuDrM,GAAnBsM,KAGpCD,EAAsBC,GAAmBD,EAAsB,GAAnE,CAGA,IAAIE,EAAUC,KAAKC,MAAOJ,EAAsBC,EAAmB,KACnE,OAAO,6BACH,oBAAII,QAAQ,MAAZ,SACI,cAACC,EAAA,EAAD,CAAa7G,QAAQ,OAAO8G,IAAKL,EAASM,UAAQ,W,oBAK9D,WAAU,IAAD,OACDC,EAAqC,IAAtBtC,KAAK7H,MAAMC,SAAqC,IAAlB4H,KAAK7H,MAAMK,IAK5D,GAHI8J,IACAtC,KAAKL,MAAMC,SAAU,GAErB0C,GAAkC,MAAnBtC,KAAKL,MAAMjK,KAE1B,OAA0B,GAAtBsK,KAAKL,MAAMC,QACJ,8BACH,sBAAK1J,UAAU,UAAf,UACI,uBAAM,uBAAM,uBACZ,oEAKD,8BACH,sBAAKA,UAAU,UAAf,UACI,cAACqM,EAAA,EAAD,CAAS7L,MAAO,CAAE8L,MAAO,QAASC,OAAQ,SAAWC,UAAU,SAASC,KAAK,SAA7E,SACI,sBAAMzM,UAAU,UAAhB,0BAEJ,8DAOhB,IHzJ6BwH,EGyJzBkF,EAAK5C,KAAKL,MAAMjK,KAChBmN,EAAW,EAETC,EAAc,SAAChL,GACjB,OAAU,IAANA,GAAW8K,EAAGG,KAAKjL,EAAI,GAAG/B,MAAQ6M,EAAGG,KAAKjL,GAAG/B,KACtC8M,EAEJA,EAAW/K,EAAI,GAG1B,OAAO,gCACF8K,EAAG3C,QAAQC,QAAUX,GAAoB,qBAAKyD,IAAKC,EAAM/M,UAAU,WAAWgN,IAAI,SAClFN,EAAG3C,QAAQC,QAAUX,GAAoB,qBAAKyD,IAAKC,EAAM/M,UAAU,mBAAmBgN,IAAI,SAE3F,qBAAKhN,UAAU,aAAf,SACK0M,EAAG3C,QAAQkD,OAGhB,qBAAKjN,UAAU,WAAf,SACI,eAACkN,EAAA,EAAD,CAAO9H,QAAQ,OAAOX,KAAK,KAAK0I,WAAW,KAAKC,SAAO,EAACC,UAAQ,EAAhE,UACI,kCACI,6BACI,oBAAIrN,UAAU,kBAAkBgM,QAAQ,MAAxC,SACI,mBAAGjL,OAAO,SAASC,KAAM,kCAAoC8I,KAAK7H,MAAMM,UAAY,aAApF,UHhLKiF,EGgLmHkF,EAAG3C,QAAQC,MHlP1I,aAmEjBxC,EACO,kBAGI,wBAAXA,EACO,sBAGI,gBAAXA,EACO,iBAGI,WAAXA,EACO,0BADX,SGsKqBsC,KAAKwD,mBAAmBZ,EAAG3C,QAAQ4B,oBAAqBe,EAAG3C,QAAQ6B,iBACpE,+BACI,oBAAIpL,MAAO,CAAE,aAAc,QAA3B,SAAqC,sBAAMR,UAAU,YAAhB,iBACrC,oBAAIQ,MAAO,CAAE,aAAc,UAA3B,kBACA,oBAAIA,MAAO,CAAE,aAAc,QAA3B,oBACA,yCACA,oBAAIA,MAAO,CAAE,aAAc,QAA3B,eACCkM,EAAGa,SAAS3M,KAAI,SAAA4M,GAAC,OAAI,oBAAIxN,UAAU,kBAAkBiB,MAAOuM,EAAEP,KAAO,MAAQO,EAAEC,OAA1D,SAAkE,mBAAG1M,OAAO,SAASC,KAAM,kCAAoC,EAAKiB,MAAMM,UAAY,YAAciL,EAAEE,MAApG,SAA4GF,EAAEE,mBAG9M,gCACKhB,EAAGG,KAAKjM,KAAI,SAACb,EAAG6B,GAAJ,OAAU,cAAC,EAAD,CAAiBnC,UAAWmN,EAAYhL,GAAIpC,KAAMO,EAAGL,SAAU,EAAK+J,MAAM/J,UAA5DkC,oB,GAlPtC+L,IAAMC,WCCdC,G,kKAhBX,WACI,OACI,gCACI,qBAAK7N,UAAU,gBAAf,SACI,cAAC,EAAD,eAA0D8J,KAAK7H,OAA9C6H,KAAK7H,MAAMM,UAAUuH,KAAK7H,MAAMK,OAErD,qBAAKtC,UAAU,gBAAf,SACK8J,KAAK7H,MAAM6L,WAEhB,qBAAK9N,UAAU,kB,GAVJ2N,IAAMC,YCqBlBG,G,2KAhBX,SAAsBtC,EAAWC,GAC7B,OAAQ1I,EAAQyI,EAAW3B,KAAK7H,S,oBAGpC,WAEI,OADAmF,QAAQC,IAAI,wBAAyByC,KAAK7H,OAEtC,8BACI,cAAC,EAAD,uCAAyC6H,KAAK7H,OAAYD,EAAQ8H,KAAK7H,QAAvE,aACI,cAAC,EAAD,2BAA0D6H,KAAK7H,OAAWD,EAAQ8H,KAAK7H,QAAxE,YAAcU,EAAYmH,KAAK7H,UADhC,0B,GATL0L,IAAMC,WCF7BI,I,wDACF,WAAY/L,GAAQ,uCACVA,G,0CAOV,WAGI,GAFAmF,QAAQC,IAAI,gBAAiByC,KAAK7H,OAEZ,MAAnB6H,KAAK7H,MAAMzC,KACV,OAAO,6BAAI,oDAGf,IAAIA,EAAOsK,KAAK7H,MAAMzC,KAEtB,OAAQ,+BACJ,6BAAK,cAAC,IAAD,CAAM4D,GAAID,EAAS,sBAAuB3D,EAAKkF,GAAIoF,KAAK7H,MAAMK,IAAKwH,KAAK7H,MAAMC,QAAS4H,KAAK7H,MAAMI,cAAeyH,KAAK7H,MAAMS,YAA5H,SACD,sBAAK1C,UAAU,qCAAqCiO,IAAKnE,KAAK7H,MAAMiM,SAApE,cAAgF,uBAAOnJ,KAAK,WAAWC,QAAS8E,KAAK7H,MAAMkM,WAA3H,WACJ,oBAAIC,UAAU,OAAd,SAAsB5O,EAAKyN,OAC3B,oBAAImB,UAAU,OAAd,SAAsB5O,EAAKkF,KAC3B,oBAAI0J,UAAU,SAAd,SAAuB,mBAAGpN,KAAM,kCAAoCxB,EAAKkF,GAAI3D,OAAO,SAA7D,yB,mCAY/B,SAAsB0K,EAAWC,GAI7B,OAAkB,OAAdD,GAAqC,OAAf3B,KAAK7H,OAAkBwJ,EAAU0C,WAAarE,KAAK7H,MAAMkM,a,GAvClER,IAAMC,YA+ChBD,OAAMU,YAAW,SAACpM,EAAOgM,GAAR,OAAgB,cAAC,GAAD,aAC5CC,SAAUD,GAAShM,OC3CjBqM,I,MAAkB,SAACC,GAAD,MAAU,qBAAqBA,IAIvD,SAASC,GAAT,GAA8C,IAAtBC,EAAqB,EAArBA,UAAWX,EAAU,EAAVA,SAC/B,OAAOH,IAAMe,SAASC,QAAQb,GAAUc,QAAQ,SAACC,GAC7C,OAAQJ,GAA0B,IAAbA,GAAmBI,EAAM5M,MAAMzC,KAAKyN,KAAK6B,cAAcC,SAASN,EAAUK,kB,IA6LxFE,G,kDApLV,WAAY/M,GAAQ,IAAD,8BAChB,cAAMA,IAJVgN,UAAY,GAGQ,EAFpBC,MAAQ,GAIH,EAAKzF,MAAQ,CAAEjK,KAAM,KAAMkK,SAAS,EAAMC,WAAW,EAAMC,QAAQ,EAAO6E,UAAU,GAAI5E,YAAY,GAFrF,E,8FAKnB,WAA0B0E,GAA1B,mBAAArI,EAAA,6DACQqB,GAAU,EACRjF,EAvBA,6BAuBegM,GAAgBC,GACrCnH,QAAQC,IAAI,oBAAqB/E,GAHrC,SAIuB6D,MAAM7D,GACrB4E,OAAM,SAAAC,GACFC,QAAQC,IAAIF,GACZI,GAAU,KAPtB,UAIUR,EAJV,QAWQQ,EAXR,oDAewB,MAAhBR,EAAKS,OAfb,kCAgBiCT,EAAKU,OAhBtC,QAgBQqC,KAAKL,MAAMjK,KAhBnB,OAgB8CkI,OAhB9C,wBAoBIoC,KAAKL,MAAMC,SAAU,EACrBI,KAAKqF,cArBT,iD,+EAyBA,WACI,OAAO,qBAAKnP,UAAU,mBAAf,SACH,cAACkN,EAAA,EAAD,CAAwB9H,QAAQ,OAAOX,KAAK,KAAK0I,WAAW,KAAKC,QAAQ,OAAzE,SACI,kCACI,uBAGA,+BACI,uBACA,0CACA,uBACA,mDATD,eAD8B,c,4BAiBjD,WAAiB,IAAD,OACRV,EAAK5C,KAAKL,MAAMjK,KAGpB,OAAO,qBAAKQ,UAAU,uBAAf,SACH,eAACkN,EAAA,EAAD,CAA4B9H,QAAQ,OAAOX,KAAK,KAAK0I,WAAW,KAAKC,QAAQ,OAA7E,UACI,kCACI,6BACI,oBAAIpB,QAAQ,IAAZ,SACI,sBAAKhM,UAAU,mBAAf,UACI,8BACI,cAACwE,EAAA,EAAD,CACIxE,UAAU,KACV2E,YAAY,mBAAmByK,aAActF,KAAKL,MAAMgF,UACxD5J,SAAU,SAAAC,GAAC,OAAI,EAAK2E,MAAMgF,UAAY3J,EAAE/D,OAAO6D,WAGvD,8BACI,cAACK,EAAA,EAAD,CAAQF,KAAK,SAAS/E,UAAU,YAAY2F,QAAS,SAACb,GAClD,GAA4B,IAAxB,EAAK2E,MAAMgF,UACX,OAAO,EAAKxE,SAAS,CAAEJ,YAAa,EAAKJ,MAAMI,YAAc,KAFrE,6BAahB,+BACI,uBACA,gDACA,oCACA,kDAKR,gCACI,cAAC2E,GAAD,CAAwDC,UAAW3E,KAAKL,MAAMgF,UAA9E,SACK/B,EAAG9L,KAAI,SAACb,EAAG6B,GACR,GAAgB,WAAZ7B,EAAEiK,MAWN,OAPMjK,EAAE2E,MAAM,EAAKwK,QACf,EAAKD,UAAU5E,KAAKsD,IAAM0B,aAC1B,EAAKH,MAAMnP,EAAE2E,IAAM,EAAKuK,UAAUpN,OAAS,GAIrC,cAAC,GAAD,CAAYoM,IAAK,EAAKgB,UAAU,EAAKC,MAAMnP,EAAE2E,KAAclF,KAAMO,EAAGuC,IAAK,EAAKL,MAAMK,IAAKJ,QAAS,EAAKD,MAAMC,QAASG,cAAe,EAAKJ,MAAMI,cAAeK,WAAY,EAAKT,MAAMS,WAAYyL,SAAUpO,EAAE2E,IAAM,EAAKzC,MAAMM,WAAvKX,OAZvD,aAAekI,KAAKL,MAAMgF,eApC1C,mBADkC,kB,oBA2DrD,WACI,OAAwB,OAApB3E,KAAKL,MAAMjK,MAEe,IAAvBsK,KAAKL,MAAMC,QACJ,8BACC,qBAAK1J,UAAU,UAAf,SACA,oDAKD,8BACH,sBAAKA,UAAU,UAAf,UACI,cAACqM,EAAA,EAAD,CAAS7L,MAAO,CAAE8L,MAAO,QAASC,OAAQ,SAAWC,UAAU,SAASC,KAAK,SAA7E,SACI,sBAAMzM,UAAU,UAAhB,0BAEJ,yDAMR,qBAA4BA,UAAU,mBAAtC,SAEH8J,KAAKwF,kBAFO,sB,iEAQrB,sBAAApJ,EAAA,6DACI4D,KAAKL,MAAMC,SAAU,EADzB,kBAEWI,KAAKyF,qBAAoB,GAC/BnJ,MACG,SAAC5G,GACG4H,QAAQC,IAAI,gBAAiB7H,MAEpC0H,OAAM,SAAApC,GAAC,OAAI0K,MAAM1K,OAPtB,gD,gIAUA,sBAAAoB,EAAA,sEACU4D,KAAK2F,eADf,gD,qFAIC,WACG3F,KAAK0B,wBAAwBpF,S,kCAGhC,c,mCAID,SAAsBqF,EAAWC,GAC7B,GAAgB,MAAbD,IAAuBA,EAAUnJ,KAAOwH,KAAK7H,MAAMK,KAAOmJ,EAAUlJ,WAAauH,KAAK7H,MAAMM,WAAW,CACtG,IACIuH,KAAKmF,UAAUnF,KAAKoF,MAAMQ,OAAOjE,EAAUlJ,aAAaoN,QAAQ/I,UAAhE,yCACAkD,KAAKmF,UAAUnF,KAAKoF,MAAMQ,OAAO5F,KAAK7H,MAAMM,aAAaoN,QAAQ/I,UAAjE,0BACF,MAAM9B,IAGR,OAAO,EAEX,SAAG4G,GAAaA,EAAU+C,WAAa3E,KAAKL,MAAMgF,WAAa3E,KAAKL,MAAMI,aAAe6B,EAAU7B,iB,GAjLjF8D,IAAMC,WCEjBgC,G,2KAjBX,SAAsBnE,EAAWC,GAC7B,OAAQ1I,EAAQyI,EAAW3B,KAAK7H,S,oBAGpC,WAGI,OAFAmF,QAAQC,IAAI,uBAAwByC,KAAK7H,OAGrC,8BACI,cAAC,EAAD,uCAAwC6H,KAAK7H,OAAYD,EAAQ8H,KAAK7H,QAAtE,aACI,cAAC,GAAD,2BAAgC6H,KAAK7H,OAAWD,EAAQ8H,KAAK7H,QAA5C,cADH,yB,GAVF0L,IAAMC,W,QCCvB,SAASiC,KACpB,OAAO,cAAC,IAAD,UACH,qBAAK7P,UAAU,qBAAf,SACI,eAAC,KAAD,WAEI,cAAC,KAAD,CAAgC8P,KAAK,gCAAgCC,OAAQ,SAAC9N,GAAD,OAAW,cAAC,GAAD,eAAiDA,GAA1B,yBAApG,sBACX,cAAC,KAAD,CAA6B6N,KAAK,sBAAsBC,OAAQ,SAAC9N,GAAD,OAAW,cAAC,GAAD,eAA+CA,GAA3B,0BAApF,mBACX,cAAC,KAAD,CAAU+N,KAAK,IAAI5M,GAAG,qEAAqE6M,UAAWL,OAJ9F,oBADwB,uBADrB,eCOZM,OAVf,WACE,OACE,qBAAKlQ,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC6P,GAAD,GAAkB,sBCGXM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjK,MAAK,YAAkD,IAA/CkK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.9407bf7a.chunk.js","sourcesContent":["import React from 'react'\nimport './RankRow.css'\nimport './CFHandles.css'\n\n\nconst rankToCSSClassName =(rank) => rank.replace(/\\s/g, \"\");\n\nfunction validStr(str){\n    if(str === undefined || str === null)\n        return \"\"\n    return str\n}\n\nexport default function RankRow({data, localRank, userInfo}){\n    const items = []\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    const getUserRank = (handle) => {\n        if (handle in userInfo){\n            return userInfo[handle].rank\n        }\n        return \"\"\n    }\n\n    const getUserFullName = (handle) => {\n        if (handle in userInfo) {\n                return validStr(userInfo[handle].firstName) + \" \" +  validStr(userInfo[handle].lastName)\n        }\n        return \"\"\n    }\n\n    const mainContent = (r) => <div className=\"rank-main-content\">\n        <span className=\"cell-points\">{r.points} </span>\n        <span className=\"cell-time\">{r.bestSubmissionTimeSeconds && new Date(r.bestSubmissionTimeSeconds * 1000).toISOString().substr(11, 8)}</span>\n    </div>\n\n    const rejectedCount = (r) => <span className=\"cell-rejected\">{-r.rejectedAttemptCount}</span>\n\n    return (<tr className=\"rank-font\">\n        <td style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >{data.rank > 0 && localRank}</span></td>\n        <td style={{ \"text-align\": \"center\" }}>{data.rank > 0 && data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}><div className=\"handle-cell-div\">\n            {data.party.participantType !== \"CONTESTANT\" && <span style={{ \"color\": \"#fff\" }}>*</span>}\n            {data.party.members.map(m => \n            <div className={\"handle \" + rankToCSSClassName(getUserRank(m.handle))}> <a target=\"_blank\" href={\"https://codeforces.com/profile/\" + m.handle} title={getUserRank(m.handle) + \" \" + getUserFullName(m.handle)} >\n                <div> <span className=\"firstLetter\">{m.handle.substr(0, 1)}</span>{ m.handle.substr(1) } </div>\n             </a></div> )} </div>\n        </td>\n        \n        <td ><span title=\"points\">{data.points}</span> {(data.rank > 0 && data.penalty > 0) &&  <span title=\"penalty\" className=\"cell-rejected\">{data.penalty} </span>}</td>\n        <td ></td>\n        {data.problemResults.map(r => {\n            return <td>\n                <div className=\"rank-cell-div\">\n                    {r.points > 0  && <div className=\"rank-side-content\"></div>}\n                    {r.points > 0 && mainContent(r)}\n                    <div className=\"rank-side-content\">{r.rejectedAttemptCount > 0 && rejectedCount(r)}</div>\n                </div>\n            </td>\n        })}\n    </tr>)\n}\n","\n\nfunction getQueryVariable(search, variable) {\n    var query = search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) == variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return \"\"\n}\n\n\nfunction getHashCode(str) {\n    var hash = 0, i, chr;\n    if (str.length === 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\nexport function UrlInfo(props){\n    let handles = getQueryVariable(props.location.search, \"handles\")\n    if(handles.length > 0 && handles.slice(-1) != \";\"){\n        handles = handles + \";\"\n    }\n\n    let parsedHandles = getQueryVariable(props.location.search, \"parsedHandles\")\n    if (parsedHandles.length > 0 && parsedHandles.slice(-1) != \";\") {\n        parsedHandles = parsedHandles + \";\"\n    }\n\n    return {\n        url: getQueryVariable(props.location.search, \"url\"),\n        contestID: props.match.params.contestID,\n        handles: handles,\n        parsedHandles: parsedHandles,\n        unofficial: getQueryVariable(props.location.search, \"unofficial\") == \"true\"\n    }\n}\n\nexport function HashFromURL(props){\n    const {url, contestID, handles, parsedHandles, unofficial} = UrlInfo(props)\n    return getHashCode(url + contestID + handles + parsedHandles + unofficial.toString())\n}\n\n\nexport function SameUrl(prop1, prop2){\n    return HashFromURL(prop1) == HashFromURL(prop2)\n}\n\nexport function BuildUrl(to, contestID, url, handles, parsedHandles, unofficial){\n    let nextPath = to\n    if (nextPath.length > 0 && nextPath.slice(-1)!= \"/\")\n    {\n        nextPath = nextPath + \"/\"\n    }\n    if(!contestID) {\n        contestID = \"1541\"\n    }\n    nextPath = nextPath + contestID + \"?\"\n    if(url !== \"\"  && url != undefined){\n        nextPath = nextPath + \"url=\" + url + \"&\"\n    } else {\n        parsedHandles = \"\"\n    }\n\n    if(unofficial && unofficial.toString() == \"true\"){\n        nextPath = nextPath + \"unofficial=true&\"\n    }\n\n\n    if (handles !== \"\" && handles != undefined) {\n        nextPath =  nextPath + \"handles=\" + handles + \"&\"\n    }\n\n    if (parsedHandles !== \"\" && parsedHandles != undefined) {\n        nextPath = nextPath + \"parsedHandles=\" + parsedHandles + \"&\"\n    }\n\n    if (nextPath.length > 0 && nextPath.slice(-1) === \"&\") {\n        nextPath = nextPath.slice(0, -1);\n    }\n    return nextPath\n}","import { BuildUrl, UrlInfo } from \"./UrlInfo\";\n\nexport function GetRanklistUrl(contestID, url, handles, parsedHandles, unofficial){\n    return BuildUrl(\"/contest\", contestID, url, handles, parsedHandles, unofficial)\n}","import Input from './Input'\nimport { useLocation } from 'react-router';\n\nimport { useState, useEffect } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, Navbar, Nav, ToggleButton} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport \"./Navigation.css\"\nimport {BuildUrl} from \"../lib/UrlInfo\"\nimport {GetRanklistUrl} from \"../lib/Goto\"\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n    var rHandles = props.handles\n    var rUnofficial = props.unofficial\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n    const [handles, setHandles] = useState(rHandles)\n    const [unofficial, setUnofficial] = useState(rUnofficial)\n    const [invisible, setInvisible] = useState(false)\n\n    var InputJSX = <div className={invisible? \"hide-me\":\"parent-input-div one-elm-flex\"}>\n        <Form key={rUrl + rContestID} className=\"width-hundred one-elm-flex\">\n            <div className=\"width-hundred flex-input-div\">\n                \n                <div className=\"handles-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        Handles\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"handles seperated by ;\"\n                        // defaultValue={rHandles}\n                        value={handles}\n                        onChange={e => setHandles(e.target.value)}\n                    // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"url-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url seperated by ;\"\n                        // defaultValue={rUrl}\n                        value={url}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n                <div className=\"contest-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput2\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0\"\n                        id=\"inlineFormInput2\"\n                        placeholder=\"ContestID\"\n                        value={contestID}\n                        onChange={\n                            (e) => {\n                                setContestID(e.target.value)\n                            }\n                        }\n                    />\n                </div>\n               \n                <div className=\"unofficial-div min-width one-elm-flex\">\n                    <input type=\"checkbox\" className=\"btn-light\" checked={unofficial} onChange={e=>{\n                        setUnofficial(e.target.checked)\n                    }}/> <span>unofficial</span>\n                </div>\n\n                <div className=\"button-div min-width one-elm-flex\">\n                    <Link to={GetRanklistUrl( contestID, url, handles, props.parsedHandles, unofficial)}>\n                        <Button type=\"submit\" className=\"mb-0 btn-light\" size=\"sm\">\n                            Load\n                        </Button>\n                    </Link>\n                </div>\n            </div>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className='navbar-expand-sm'>\n        <Nav className=\"mr-auto width-hundred\">\n            <Nav.Link href={BuildUrl(\"#selector/contests/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n\n            <div className=\"one-elm-flex\"><input type=\"checkbox\" onClick={e => setInvisible(e.target.checked)} value={invisible} /></div>\n            {InputJSX}\n        </Nav>\n\n        \n    </Navbar>\n    </div>\n\n}","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id, unofficial, users) => `/contest.standings?showUnofficial=` + unofficial + `&contestId=` + id + `&handles=` + users\nconst CF_USER_INFO = (users) => `/user.info?handles=` + users\nconst CONTEST_FINISHED = \"FINISHED\"\n\n\nexport async function ParseCFUsersFromURL(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n        return \"\"\n    });\n}\n\n\nexport async function FetchRanks(contestID, users, unofficial){\n    var errored = false\n    const url = CF_API + CF_STANDING_URL(contestID, unofficial, users)\n    console.log(\"Fetching\", url)\n    const resp = await fetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        });\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\nexport async function FetchUserInfo(users, unofficial) {\n    var errored = false\n    const url = CF_API + CF_USER_INFO(users)\n    console.log(\"Fetching\", url)\n    const resp = await fetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        });\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\n\nexport function GetContestStatusText(status) {\n    if (status === CONTEST_FINISHED) {\n        return \"Final Standings\"\n    }\n\n    if (status === \"PENDING_SYSTEM_TEST\") {\n        return \"Pending System Test\"\n    }\n\n    if (status === \"SYSTEM_TEST\") {\n        return \"System Testing\"\n    }\n\n    if (status === \"CODING\") {\n        return \"Contest is Running\"\n    }\n}\n\nexport function GetHandleTitle(rating) {\n    if (rating < 1200) {\n        return \"newbie\"\n    }\n\n    if (rating < 1400) {\n        return \"pupil\"\n    }\n\n    if (rating < 1600) {\n        return \"specialist\"\n    }\n\n    if (rating < 1900) {\n        return \"expert\"\n    }\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { GetHandleTitle } from \"./CF\";\n\nexport const UserDefined = 1;\nexport const OrgDefined = 2;\nexport const HideIfFromOrg = 4;\n\nexport class Flag {\n    flag = 0\n    Set(flag){\n        this.flag = this.flag | flag\n    }\n    Check(flag){\n        return (this.flag & flag) !== 0\n    }\n}\n\n\n\nfunction setDifference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\nfunction eqSet(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport function StringToHandleSet(handles){\n    return new Set(handles.split(\";\"))\n}\n\nexport function HandleSetToString(handles) {\n    return [...handles].join(';') + \";\"\n}\n\nexport function UniqueParsedHandles(hParsed, oldHandles){\n    let ph = StringToHandleSet(hParsed)\n    let oh = StringToHandleSet(oldHandles)\n    let diff = setDifference( ph , oh)\n    return {\n        cnt: diff.size,\n        unq: HandleSetToString(diff),\n        tot: oh.size + diff.size - 1\n    }\n}\n\nexport function IsSameHandles(ha, hb) {\n    return eqSet(StringToHandleSet(ha), StringToHandleSet(hb))\n}\n\n","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button, ProgressBar } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport { ParseCFUsersFromURL, FetchRanks, GetContestStatusText, FetchUserInfo} from \"../lib/CF\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\nimport { GetRanklistUrl} from \"../lib/Goto\"\nimport { IsSameHandles, UniqueParsedHandles } from \"../lib/Handles\"\n\n\n\n\n\nconst CONTEST_FINISHED = \"FINISHED\"\nconst MAX_ASYNC_HANDLE_PARSER_PER_URL = 2\n\n\n\nclass RankList extends React.Component{\n    _isMounted = false\n\n    constructor(props) {\n        super(props);\n        let h = props.handles;\n        if(props.url !== \"\"){\n            h = h + props.parsedHandles\n        }\n        this.state = { data: null, loading:true, needRetry:true, failed:false, handles: h, renderCount: 0, userInfo:{} };\n    }\n\n    async actionFetchRanks(users){\n\n        let resp = await FetchRanks(this.props.contestID, users, this.props.unofficial)\n\n        if (resp !== undefined) {\n            this.state.data = resp\n            if (this.state.data.contest.phase == CONTEST_FINISHED) {\n                this.state.needRetry = false\n            } else {\n                this.state.needRetry = true\n            }\n        } else {\n            this.state.needRetry = false\n        }\n    \n        this.state.loading = false\n        if(this._isMounted){\n            this.setState({\n                renderCount:this.state.renderCount + 1\n            })\n        }\n    }\n\n    async actionFetchUserInfo(users) {\n        let resp = await FetchUserInfo(users)\n        if (resp !== undefined) {\n            let mp = {}\n            resp.map(r => mp[r.handle] = r)\n            this.state.userInfo = mp\n        } else {\n            console.log(\"user-info not found. unable to set colors\")\n        }\n\n        if (this._isMounted) {\n            this.setState({\n                renderCount: this.state.renderCount + 1\n            })\n        }\n    }\n\n    async parseHandlesFromSingleURLAndPages(url) {\n        let handles = \"\"\n        let pageID = 1\n\n        while(true){\n            let promises = []\n            for (let i = 1; i <= MAX_ASYNC_HANDLE_PARSER_PER_URL; i++) {\n                promises.push(ParseCFUsersFromURL(url + \"/page/\" + pageID))\n                pageID++\n            }\n\n            let pHandles = await Promise.all(promises)\n\n            for (let i = 0; i < pHandles.length; i++) {\n                var { unq, cnt, tot } = UniqueParsedHandles(pHandles[i], handles)\n                if (cnt > 0) {\n                    handles += unq\n                } else {\n                    break\n                }\n            }\n            \n            if(cnt <= 0 || pageID > 20) {\n                break\n            }\n        }\n        \n        console.table({ log: \"Parse handle result per url\", url: url, total: tot, handles:handles })\n        return handles\n    }\n\n    async parseHandlesFromAllUrls(url){\n        let handles = \"\"\n        let urls = url.split(\";\")\n        let promises = []\n        for(let i = 0; i < urls.length; i++){\n            if(urls[i] === \"\") return\n            promises.push(this.parseHandlesFromSingleURLAndPages(urls[i]))\n        }\n\n        let pHandles = await Promise.all(promises)\n\n        for(let i = 0; i < pHandles.length; i++){\n            var { unq, cnt, tot } = UniqueParsedHandles(pHandles[i], handles)\n            if(cnt > 0){\n                handles += unq\n            }\n        }\n        console.table({ log: \"Total handles parsed\", total: tot, handles:handles})\n        return handles\n    }\n\n    async parseHandles() {\n        if(this.props.url === undefined || this.props.url === \"\"){\n            return\n        }\n        this.state.loading = true\n        let handles = await this.parseHandlesFromAllUrls(this.props.url)\n\n        var { unq, cnt, tot } = UniqueParsedHandles(handles, this.props.handles)\n\n        console.table({ log: \"Total handles parsed - custom handles\", total: tot, totalHandles: handles, uniqueHandles: unq, uniqueCount: cnt })\n\n\n        let isSame = IsSameHandles(unq, this.props.parsedHandles)\n        if (isSame){\n            return\n        }\n\n\n        if (this._isMounted) {\n            this.props.history.push(GetRanklistUrl(this.props.contestID, this.props.url, this.props.handles, unq, this.props.unofficial))\n        }\n    }\n\n    async setRefreshIfNecessary(){\n        if(this.state.handles !== \"\") {\n            this.actionFetchRanks(this.state.handles)\n            this.actionFetchUserInfo(this.state.handles)\n        }\n        await this.parseHandles()\n        if (this.state.needRetry) {\n            this.parseRankInterval = setInterval(() => { this.actionFetchRanks(this.state.handles) }, 30000);\n        }\n    }\n    componentWillUnmount() {\n        clearInterval(this.parseRankInterval);\n        this._isMounted = false;\n    }\n\n    componentDidMount() {\n        this.setRefreshIfNecessary().then()\n        this._isMounted = true\n    }\n     \n\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.renderCount != this.state.renderCount) {\n            return true\n        }\n        if (nextState.handles != this.state.handles) {\n            this.actionFetchRanks(nextState.handles)\n            return false\n        }\n        return false\n    }\n\n\n    displayProgressBar(relativeTimeSeconds, durationSeconds) {\n        if (relativeTimeSeconds == undefined || durationSeconds == undefined) {\n            return\n        }\n        if (relativeTimeSeconds > durationSeconds || relativeTimeSeconds < 0) {\n            return\n        }\n        let percent = Math.round((relativeTimeSeconds / durationSeconds) * 100)\n        return <tr>\n            <th colSpan=\"100\">\n                <ProgressBar variant=\"info\" now={percent} animated ></ProgressBar>\n            </th>\n        </tr>\n    }\n\n    render() {\n        let invalidArgs = (this.props.handles == \"\") && (this.props.url == \"\")\n\n        if (invalidArgs) {\n            this.state.loading = false\n        }\n        if (invalidArgs || this.state.data == null) {\n\n            if (this.state.loading == false) {\n                return <div>\n                    <div className=\"stopped\">\n                        <br /><br /><br />\n                        <p>Not Available or Invalid Args!</p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        let cf = this.state.data\n        let lastRank = 1\n\n        const currentRank = (i) => {\n            if (i === 0 || cf.rows[i - 1].rank == cf.rows[i].rank) {\n                return lastRank\n            }\n            return lastRank = i + 1\n        }\n\n        return <div>\n            {cf.contest.phase === CONTEST_FINISHED && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase !== CONTEST_FINISHED && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"white-hyperlink\" colSpan=\"100\">\n                                <a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/standings\"}>{GetContestStatusText(cf.contest.phase)}</a>\n                            </th>\n                        </tr>\n                        {this.displayProgressBar(cf.contest.relativeTimeSeconds, cf.contest.durationSeconds)}\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >#</span></th>\n                            <th style={{ \"text-align\": \"center\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th> Score </th>\n                            <th style={{ \"text-align\": \"left\" }}> </th>\n                            {cf.problems.map(p => <th className=\"white-hyperlink\" title={p.name + \" : \" + p.rating}><a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/problem/\" + p.index}>{p.index}</a></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} localRank={currentRank(i)} data={r} userInfo={this.state.userInfo} />)}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nimport { UrlInfo, HashFromURL, SameUrl } from \"../lib/UrlInfo\"\n\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"rank-layout-rendering\", this.props)\n        return (\n            <div>\n                <CommonLayout key=\"rank-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <RankList key={\"rank-list\" + HashFromURL(this.props)} {...this.props} {...UrlInfo(this.props)}></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Link } from 'react-router-dom'\nimport React from 'react';\nimport { ToggleButton } from 'react-bootstrap';\nimport {BuildUrl} from \"../lib/UrlInfo\"\nimport \"./ContestRow.css\"\n\nclass ContestRow extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     data: null,\n        //     selected: false,\n        // }\n    }\n\n    render(){\n        console.log(\"rendering-row\", this.props)\n        \n        if(this.props.data == null) {\n            return <tr><td>called with null</td></tr>\n        }\n\n        var data = this.props.data\n\n        return (<tr>\n            <td ><Link to={BuildUrl('/selector/contests/', data.id, this.props.url, this.props.handles, this.props.parsedHandles, this.props.unofficial)}>\n                <div className=\"div-checkbox-selector one-elm-flex\" ref={this.props.innerRef} > <input type=\"checkbox\" checked={this.props.selected}/> </div></Link></td>\n            <td textAlign=\"left\">{data.name}</td>\n            <td textAlign=\"left\">{data.id}</td>\n            <td textAlign=\"center\"><a href={\"https://codeforces.com/contest/\" + data.id} target=\"_blank\">link</a></td>\n        </tr>\n        )\n    }\n\n    // componentDidMount() {\n    //     this.setState({\n    //         data: this.props.data,\n    //         selected: selected\n    //     })\n    // }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // if (nextState.data != null) {\n        //     return true\n        // }\n        if (nextProps !== null && this.props !== null && nextProps.selected === this.props.selected) {\n            return false\n        }\n        return true\n    }\n}\n\n\nexport default React.forwardRef((props, ref) => <ContestRow\n    innerRef={ref} {...props}\n/>);","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport ContestRow from \"./ContestRow\"\nimport Navigation from \"./Navigation\"\nimport React, { useDebugValue } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ContestList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\n\n\nfunction RowConatiner({ searchStr, children}){\n    return React.Children.toArray(children).filter( (child) =>{\n        return !searchStr || searchStr == \"\" || child.props.data.name.toLowerCase().includes(searchStr.toLowerCase())\n    })\n}\n\n\nclass ContestList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, loading: true, needRetry: true, failed: false, searchStr:\"\", renderCount:0 };\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n\n     renderOrgs(){\n         return <div className=\"orgs content-div\" key=\"orgs-div\">\n             <Table key='orgs-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                 <thead>\n                     <tr>\n\n                     </tr>\n                     <tr>\n                         <th></th>\n                         <th>Org Name</th>\n                         <th></th>\n                         <th>Codeforces</th>\n                     </tr>\n                 </thead>\n             </Table>\n         </div>\n     }\n\n     renderContests(){\n         var cf = this.state.data\n\n\n         return <div className=\"contests content-div\" key=\"contests-div\">\n             <Table key='contests-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                 <thead>\n                     <tr>\n                         <th colSpan=\"2\">\n                             <div className=\"filter-container\">\n                                 <div>\n                                     <FormControl\n                                         className=\"sm\"\n                                         placeholder=\"Filter by Tittle\" defaultValue={this.state.searchStr}\n                                         onChange={e => this.state.searchStr = e.target.value}\n                                     ></FormControl>\n                                 </div>\n                                 <div>\n                                     <Button type=\"submit\" className=\"btn-light\" onClick={(e) => {\n                                         if (this.state.searchStr != \"\") {\n                                             return this.setState({ renderCount: this.state.renderCount + 1 })\n                                         }\n                                     }}>\n                                         Filter\n                                     </Button>\n                                 </div>\n                             </div>\n\n                         </th>\n                     </tr>\n\n                     <tr>\n                         <th></th>\n                         <th>Contest Tittle</th>\n                         <th>ID</th>\n                         <th>Codeforces</th>\n                     </tr>\n\n\n                 </thead>\n                 <tbody>\n                     <RowConatiner key={\"search-str\" + this.state.searchStr} searchStr={this.state.searchStr}>\n                         {cf.map((r, i) => {\n                             if (r.phase === \"BEFORE\") {\n                                 return\n                             }\n\n                             if (!(r.id in this.refID)) {\n                                 this.selectRef.push(React.createRef())\n                                 this.refID[r.id] = this.selectRef.length - 1\n                             }\n\n\n                             var elm = <ContestRow ref={this.selectRef[this.refID[r.id]]} key={i} data={r} url={this.props.url} handles={this.props.handles} parsedHandles={this.props.parsedHandles} unofficial={this.props.unofficial} selected={r.id == this.props.contestID} />\n                             return elm\n                         })}\n                     </RowConatiner>\n                 </tbody>\n             </Table>\n         </div>\n     }\n     \n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n         return <div key=\"content-list-div\" className=\"content-list-div\" >\n            {/* {this.renderOrgs()} */}\n            {this.renderContests()}\n            \n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"contests-data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n    }\n\n     componentDidMount() {\n        this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextProps != null && ( nextProps.url != this.props.url || nextProps.contestID != this.props.contestID)){\n            try {\n                this.selectRef[this.refID[Number(nextProps.contestID)]].current.innerHTML = `<input type=\"checkbox\" checked=\"true\">`\n                this.selectRef[this.refID[Number(this.props.contestID)]].current.innerHTML = `<input type=\"checkbox\">`\n            } catch(e){ // may fail due to filter \n\n            }\n            return false\n        }\n        if(nextState && nextState.searchStr != this.state.searchStr || this.state.renderCount != nextState.renderCount){\n            return true\n        }\n        return false\n    }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass ContestListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <ContestList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport Navigation from './Navigation'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useState } from 'react'\n\n\nexport default function AppContainer(){\n    return <HashRouter key='hash-router'>\n        <div className=\"Switch-Route-Block\" key='switch-route-block'>\n            <Switch key='switch-route-sw'>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route key='route-contest-list' path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout key=\"contest-list-layout\" {...props}/>} />\n                <Route key='route-rank-list' path=\"/contest/:contestID\" render={(props) => <RankListLayout key=\"single-rank-instance\" {...props}/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\" component={ContestListLayout} />\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer key='app-conatiner'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}