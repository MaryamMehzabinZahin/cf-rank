{"version":3,"sources":["components/RankRow.js","lib/UrlInfo.js","lib/Goto.js","components/Navigation.js","lib/CF/Constants.js","lib/CF/Local.js","lib/Handles.js","lib/CF/API.js","logo.svg","components/TimeViewer.jsx","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestList.js","components/ContestListLayout.js","components/OrgsList.js","components/OrgsListLayout.js","AssetSetup.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["validStr","str","undefined","RankRow","data","localRank","userInfo","getUserRank","handle","rank","mainContent","r","className","points","bestSubmissionTimeSeconds","Date","toISOString","substr","rejectedCount","rejectedAttemptCount","havingPenalty","penalty","style","party","participantType","members","map","m","String","replace","target","href","title","firstName","lastName","problemResults","getQueryVariable","search","variable","vars","substring","split","i","length","pair","decodeURIComponent","UrlInfo","props","handles","location","slice","parsedHandles","url","contestID","match","params","unofficial","HashFromURL","hash","charCodeAt","getHashCode","toString","SameUrl","prop1","prop2","BuildUrl","to","nextPath","GetRanklistUrl","Navigation","rUrl","rContestID","rHandles","rUnofficial","useState","setUrl","setContestID","setHandles","setUnofficial","invisible","setInvisible","InputJSX","Form","Label","htmlFor","srOnly","FormControl","size","id","placeholder","value","onChange","e","type","checked","Button","Navbar","bg","variant","Nav","Link","active","pathname","startsWith","disabled","onClick","CF_API","CF_ORG_URL","orgID","CF_FE","CF_ORG_URL_TO_ID","lastIndexOf","UrlsToNames","a","ParseCFOrgsCached","orgs","names","urls","lastPart","org","find","o","name","fetch","headers","then","response","status","json","ParseCFHandlesCached","StringToHandleSet","Set","hs","delete","UniqueParsedHandles","hParsed","oldHandles","ph","oh","diff","setA","setB","_difference","elem","setDifference","cnt","unq","join","tot","ProxyHost","CF_STANDING_URL","users","CF_USER_INFO","parseCFUsersFromURL","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","console","log","ParseCFHandles","handleCount","pageID","hcUnknown","promises","push","Promise","all","pHandles","table","total","ParseCFOrgs","replaceAll","skipFirst","NameAndCnt","trim","nameEndsAt","parseInt","isNaN","hc","sleep","ms","resolve","setTimeout","lock","counter","this","Math","round","cb","RateLimitFetch","retryCount","hold","release","FetchRanks","errored","result","FetchUserInfo","TimeViewer","endAt","seconds","timeLeft","mode","now","state","up","days","floor","hours","minutes","verbose","label","_isMounted","clearInterval","updateInterval","setInterval","setState","React","Component","CONTEST_FINISHED","RankList","loading","needRetry","failed","renderCount","userInfoCnt","handlesSet","handlesSetInRank","handlesSetRankQ","progressBar","info","show","filterNames","contest","problems","rows","q","take","has","add","forEach","h","phase","actionFetchRanks","actionFetchRanksAndFilterByUsers","actionFetchUserInfo","mp","count","parseHandlesFromAllUrlsAndSet","setRanklistFilters","BuildRanklist","turnOffProgressBar","parseRankInterval","setRefreshIfNecessary","nextProps","nextState","relativeTimeSeconds","durationSeconds","percent","colSpan","ProgressBar","animated","handleStatus","handleText","rankStatus","rankNow","rankText","infoStatus","infoNow","infoText","invalidArgs","renderProgressBar","Spinner","width","height","animation","role","cf","lastRank","currentRank","src","logo","alt","startTimeSeconds","Table","responsive","striped","bordered","displayContestProgressBar","p","rating","index","CommonLayout","children","RankListLayout","CF_CONTESTS_URL","gym","ContestList","selectRef","refID","searchStr","onFilter","bind","handleCheckbox","forceUpdate","selContest","Number","current","history","rID","toLowerCase","includes","hidden","row","ref","textAlign","defaultValue","defaultChecked","createRef","renderRow","renderContests","actionFetchContests","alert","fetchContests","ContestListLayout","OrgsList","urlSet","selOrg","compiledUrl","renderOrgs","parseOrgs","OrgsListLayout","ParseFileLS","RateLimit","AssetSetup","completed","ls","rateLimit","window","URL","createObjectURL","Blob","link","document","createElement","setAttribute","body","appendChild","click","parentNode","removeChild","setup","AutoDownload","JSON","stringify","scrapeAllHandles","stepCount","fileName","work","phc","orgName","parsedHandleCount","expectedHandleCount","exec","done","AppContainer","path","render","exact","from","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4b7d091c.chunk.js","sourcesContent":["import React from 'react'\nimport './css/RankRow.css'\nimport './css/CFHandles.css'\n\n\nconst rankToCSSClassName =(rank) =>{\n    if(typeof rank === 'string' || rank instanceof String){  \n        return rank.replace(/\\s/g, \"\")\n    }\n    return \"\"\n};\n\nfunction validStr(str){\n    if(str === undefined || str === null)\n        return \"\"\n    return str\n}\n\nexport default function RankRow({data, localRank, userInfo}){\n    const items = []\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    const getUserRank = (handle) => {\n        if (handle in userInfo){\n            return userInfo[handle].rank\n        }\n        return \"\"\n    }\n\n    const getUserFullName = (handle) => {\n        if (handle in userInfo) {\n                return validStr(userInfo[handle].firstName) + \" \" +  validStr(userInfo[handle].lastName)\n        }\n        return \"\"\n    }\n\n    const mainContent = (r) => <div className=\"rank-main-content\">\n        <span className=\"cell-points\">{r.points} </span>\n        <span className=\"cell-time\">{r.bestSubmissionTimeSeconds && new Date(r.bestSubmissionTimeSeconds * 1000).toISOString().substr(11, 8)}</span>\n    </div>\n\n    const rejectedCount = (r) => <span className=\"cell-rejected\">{-r.rejectedAttemptCount}</span>\n\n    let havingPenalty = (data.rank > 0 && data.penalty > 0)\n\n    return (<tr className=\"rank-font\">\n        <td style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >{data.rank > 0 && localRank}</span></td>\n        <td style={{ \"text-align\": \"center\" }}>{data.rank > 0 && data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}><div className=\"handle-cell-div\">\n            {data.party.participantType !== \"CONTESTANT\" && <span style={{ \"color\": \"#fff\" }}>*</span>}\n            {data.party.members.map(m => \n            <div className={\"handle \" + rankToCSSClassName(getUserRank(m.handle))}> <a target=\"_blank\" href={\"https://codeforces.com/profile/\" + m.handle} title={getUserRank(m.handle) + \" \" + getUserFullName(m.handle)} >\n                <div> <span className=\"firstLetter\">{m.handle.substr(0, 1)}</span>{ m.handle.substr(1) } </div>\n             </a></div> )} </div>\n        </td>\n        \n        <td >\n            <div className=\"rank-cell-div\">\n                {havingPenalty && <div className=\"rank-side-content\"></div>}\n                <div className=\"rank-main-content\"><span className=\"total-points\" title=\"total points\">{data.points}</span> </div>\n                {havingPenalty &&  <div className=\"rank-side-content\"><span title=\"total penalty\" className=\"cell-rejected\">{data.penalty} </span> </div>}\n            </div>\n        </td>\n        <td ></td>\n        {data.problemResults.map(r => {\n            return <td>\n                <div className=\"rank-cell-div\">\n                    {r.points > 0  && <div className=\"rank-side-content\"></div>}\n                    {r.points > 0 && mainContent(r)}\n                    <div className=\"rank-side-content\">{r.rejectedAttemptCount > 0 && rejectedCount(r)}</div>\n                </div>\n            </td>\n        })}\n    </tr>)\n}\n","\n\nfunction getQueryVariable(search, variable) {\n    var query = search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) == variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return \"\"\n}\n\n\nfunction getHashCode(str) {\n    var hash = 0, i, chr;\n    if (str.length === 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\nexport function UrlInfo(props){\n    let handles = getQueryVariable(props.location.search, \"handles\")\n    if(handles.length > 0 && handles.slice(-1) != \";\"){\n        handles = handles + \";\"\n    }\n\n    let parsedHandles = getQueryVariable(props.location.search, \"parsedHandles\")\n    if (parsedHandles.length > 0 && parsedHandles.slice(-1) != \";\") {\n        parsedHandles = parsedHandles + \";\"\n    }\n\n    return {\n        url: getQueryVariable(props.location.search, \"url\"),\n        contestID: props.match.params.contestID,\n        handles: handles,\n        parsedHandles: parsedHandles,\n        unofficial: getQueryVariable(props.location.search, \"unofficial\") == \"true\"\n    }\n}\n\nexport function HashFromURL(props){\n    const {url, contestID, handles, parsedHandles, unofficial} = UrlInfo(props)\n    return getHashCode(url + contestID + handles + parsedHandles + unofficial.toString())\n}\n\n\nexport function SameUrl(prop1, prop2){\n    return HashFromURL(prop1) == HashFromURL(prop2)\n}\n\nexport function BuildUrl(to, contestID, url, handles, parsedHandles, unofficial){\n    let nextPath = to\n    if (nextPath.length > 0 && nextPath.slice(-1)!= \"/\")\n    {\n        nextPath = nextPath + \"/\"\n    }\n    if(!contestID) {\n        contestID = \"1541\"\n    }\n    nextPath = nextPath + contestID + \"?\"\n    if(url !== \"\"  && url != undefined){\n        nextPath = nextPath + \"url=\" + url + \"&\"\n    } else {\n        parsedHandles = \"\"\n    }\n\n    if(unofficial && unofficial.toString() == \"true\"){\n        nextPath = nextPath + \"unofficial=true&\"\n    }\n\n\n    if (handles !== \"\" && handles != undefined) {\n        nextPath =  nextPath + \"handles=\" + handles + \"&\"\n    }\n\n    if (parsedHandles !== \"\" && parsedHandles != undefined) {\n        nextPath = nextPath + \"parsedHandles=\" + parsedHandles + \"&\"\n    }\n\n    if (nextPath.length > 0 && nextPath.slice(-1) === \"&\") {\n        nextPath = nextPath.slice(0, -1);\n    }\n    return nextPath\n}","import { BuildUrl, UrlInfo } from \"./UrlInfo\";\n\nexport function GetRanklistUrl(contestID, url, handles, parsedHandles, unofficial){\n    return BuildUrl(\"/contest\", contestID, url, handles, parsedHandles, unofficial)\n}\n\nexport function GetOrgsUrl(contestID, url, handles, parsedHandles, unofficial) {\n    return BuildUrl(\"/selector/orgs\", contestID, url, handles, parsedHandles, unofficial)\n}\n\nexport function GetContestUrl(contestID, url, handles, parsedHandles, unofficial) {\n    return BuildUrl(\"/selector/contests\", contestID, url, handles, parsedHandles, unofficial)\n}","\nimport { useState } from 'react'\nimport { Form, FormControl, Button, Navbar, Nav} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport \"./css/Navigation.css\"\nimport {BuildUrl} from \"../lib/UrlInfo\"\nimport {GetRanklistUrl} from \"../lib/Goto\"\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n    var rHandles = props.handles\n    var rUnofficial = props.unofficial\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n    const [handles, setHandles] = useState(rHandles)\n    const [unofficial, setUnofficial] = useState(rUnofficial)\n    const [invisible, setInvisible] = useState(false)\n\n    var InputJSX = <div className={invisible? \"hide-me\":\"parent-input-div one-elm-flex\"}>\n        <Form key={rUrl + rContestID} className=\"width-hundred one-elm-flex\">\n            <div className=\"width-hundred flex-input-div\">\n                \n                <div className=\"handles-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        Handles\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"handles seperated by ;\"\n                        // defaultValue={rHandles}\n                        value={handles}\n                        onChange={e => setHandles(e.target.value)}\n                    // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"url-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0 org-field\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url seperated by ;\"\n                        // defaultValue={rUrl}\n                        value={url}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </div>\n                <div className=\"contest-div min-width one-elm-flex\">\n                    <Form.Label htmlFor=\"inlineFormInput2\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <FormControl\n                        size=\"sm\"\n                        className=\"mb-0\"\n                        id=\"inlineFormInput2\"\n                        placeholder=\"ContestID\"\n                        value={contestID}\n                        onChange={\n                            (e) => {\n                                setContestID(e.target.value)\n                            }\n                        }\n                    />\n                </div>\n               \n                <div className=\"unofficial-div min-width one-elm-flex\">\n                    <input type=\"checkbox\" className=\"btn-light\" checked={unofficial} onChange={e=>{\n                        setUnofficial(e.target.checked)\n                    }}/> <span>unofficial</span>\n                </div>\n\n                <div className=\"button-div min-width one-elm-flex\">\n                    <Link to={GetRanklistUrl( contestID, url, handles, props.parsedHandles, unofficial)}>\n                        <Button type=\"submit\" className=\"mb-0 btn-light\" size=\"sm\">\n                            Load\n                        </Button>\n                    </Link>\n                </div>\n            </div>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className='navbar-expand-sm'>\n        <Nav className=\"mr-auto width-hundred\">\n            <Nav.Link href={BuildUrl(\"#selector/contests/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link href={BuildUrl(\"#selector/orgs/\", contestID, url, handles, props.parsedHandles, unofficial)} active={props.location.pathname.startsWith(\"/selector/orgs\")}>Orgs</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n\n            <div className=\"one-elm-flex\"><input type=\"checkbox\" onClick={e => setInvisible(e.target.checked)} value={invisible} /></div>\n            {InputJSX}\n        </Nav>\n\n        \n    </Navbar>\n    </div>\n\n}","\nexport const CONTEST_FINISHED = \"FINISHED\"\n\nexport const CF_API = \"https://codeforces.com/api\"\nexport const CF_FE = \"https://codeforces.com\"","\nimport {UniqueParsedHandles} from '../Handles'\nimport { CF_API, CF_FE, CONTEST_FINISHED } from './Constants'\n\n\nexport const CF_ORG_URL = (orgID) => CF_FE + `/ratings/organization/` + orgID\nexport const CF_ORG_URL_TO_ID = (url) => url.substr(url.lastIndexOf('/') + 1)\n\nexport const UrlsToNames = async (url) => {\n    let orgs = await ParseCFOrgsCached()\n    let names = \"\"\n    let urls = url.split(\";\")\n    for (let i = 0; i < urls.length; i++) {\n        if (urls[i] === \"\") return\n        let lastPart = urls[i].substr(urls[i].lastIndexOf('/') + 1)\n        let org = orgs.find(o => o.id == lastPart)\n        names += (org ? org.name : lastPart) + \" || \"\n    }\n\n    return (names.length < 4)? \"\": names.substr(0, names.length - 4)\n}\n\nexport async function ParseCFOrgsCached() {\n    return fetch(\"assets/orgs.json\", {\n        headers:{\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    })\n    .then((response) => {\n        if(response.status === 200) {\n            return response.json()\n        }\n        return null\n    })\n}\n\nexport async function ParseCFHandlesCached(url) {\n    let orgID = CF_ORG_URL_TO_ID(url)\n    return fetch(\"assets/handles/id.org.\" + orgID + \".json\", {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    })\n        .then((response) => {\n            if(response.status !== 200) {\n                return {handles:\"\"}\n            }\n            return response.json()\n        })\n}\n\nexport function GetContestStatusText(status) {\n    if (status === CONTEST_FINISHED) {\n        return \"Final Standings\"\n    }\n\n    if (status === \"PENDING_SYSTEM_TEST\") {\n        return \"Pending System Test\"\n    }\n\n    if (status === \"SYSTEM_TEST\") {\n        return \"System Testing\"\n    }\n\n    if (status === \"CODING\") {\n        return \"Contest is Running\"\n    }\n}\n\nexport function GetHandleTitle(rating) {\n    if (rating < 1200) {\n        return \"newbie\"\n    }\n\n    if (rating < 1400) {\n        return \"pupil\"\n    }\n\n    if (rating < 1600) {\n        return \"specialist\"\n    }\n\n    if (rating < 1900) {\n        return \"expert\"\n    }\n}","import { GetHandleTitle } from \"./CF/Local\";\n\nexport const UserDefined = 1;\nexport const OrgDefined = 2;\nexport const HideIfFromOrg = 4;\n\nexport class Flag {\n    flag = 0\n    Set(flag){\n        this.flag = this.flag | flag\n    }\n    Check(flag){\n        return (this.flag & flag) !== 0\n    }\n}\n\nfunction setDifference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\nfunction eqSet(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport function StringToHandleSet(handles){\n    if(handles == undefined || handles == null) return new Set();\n    let hs = new Set(handles.split(\";\"))\n    hs.delete(\"\")\n    return hs\n}\n\nexport function HandleSetToString(handles) {\n    return [...handles].join(';') + \";\"\n}\n\nexport function UniqueParsedHandles(hParsed, oldHandles){\n    let ph = StringToHandleSet(hParsed)\n    let oh = StringToHandleSet(oldHandles)\n    let diff = setDifference( ph , oh)\n    return {\n        cnt: diff.size,\n        unq: HandleSetToString(diff),\n        tot: oh.size + diff.size\n    }\n}\n\nexport function IsSameHandles(ha, hb) {\n    return eqSet(StringToHandleSet(ha), StringToHandleSet(hb))\n}\n\n","\nimport {UniqueParsedHandles} from '../Handles'\nimport {CF_API, CF_FE, CONTEST_FINISHED} from './Constants'\n\nconst ProxyHost = `https://cors.swiftshopbd.com/`\n\nconst CF_STANDING_URL = (id, unofficial, users) => `/contest.standings?showUnofficial=` + unofficial + `&contestId=` + id + `&handles=` + users\nconst CF_USER_INFO = (users) => `/user.info?handles=` + users\n\n\n\nconst MAX_ASYNC_HANDLE_PARSER_PER_URL = 20\n\n\nasync function parseCFUsersFromURL(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n        return \"\"\n    });\n}\n\nexport async function ParseCFHandles(url, handleCount) {\n    let handles = \"\"\n    let pageID = 1\n\n    let hcUnknown = (handleCount === undefined || handleCount <= 0)\n\n    while (true) {\n        let promises = []\n        if(hcUnknown){\n            handleCount = 1000 // make about 5 concurrent requests\n        }\n        for (let i = 1; handleCount > 0 && i <= MAX_ASYNC_HANDLE_PARSER_PER_URL; i++) {\n            promises.push(parseCFUsersFromURL(url + \"/page/\" + pageID))\n            pageID++\n            handleCount -= 200\n        }\n\n        let pHandles = await Promise.all(promises)\n\n        for (let i = 0; i < pHandles.length; i++) {\n            var { unq, cnt, tot } = UniqueParsedHandles(pHandles[i], handles)\n            if (cnt > 0) {\n                handles += unq\n            } else {\n                break\n            }\n        }\n\n        if (cnt <= 150) {\n            break\n        }\n    }\n\n    console.table({ log: \"Parse handle result per url\", url: url, total: tot, handles: handles })\n    return {handles:handles}\n}\n\nexport async function ParseCFOrgs() {\n    let url = `https://codeforces.com/ratings`\n    return fetch(ProxyHost + url, {\n        \"X-Requested-With\": \"cf\"\n    })\n        .then((response) => {\n            return response.text()\n        }).then(function (html) {\n            let parser = new DOMParser();\n\n            let doc = parser.parseFromString(html, \"text/html\").querySelector(\"#locationSelect > label > select\")\n            \n            var docAsStr = doc.innerHTML.replaceAll(/(\\r\\n|\\n|\\r)/gm, \"\").replaceAll(\"</option>\",\"ENDXXXEND\\n\");\n\n            var found = [...docAsStr.matchAll(`<option.*value=\\\"(.*)\\\".*>(.+?)ENDXXXEND`)]\n\n            let resp = []\n            let skipFirst = true\n            for (const f of found) {\n                if(skipFirst){\n                    skipFirst = false\n                    continue\n                }\n                let NameAndCnt = f[2].trim()\n                let orgID = f[1].trim()\n                let nameEndsAt = NameAndCnt.lastIndexOf(',');\n                let handleCount = parseInt(NameAndCnt.substr(nameEndsAt + 1))\n                handleCount = isNaN(handleCount)? 0: handleCount\n                resp.push({ name: NameAndCnt.substr(0, nameEndsAt), id: orgID, hc:handleCount})\n            }\n            return resp\n        })\n        .catch(function (err) {\n            console.log('Failed to fetch page: ', err);\n            return \"\"\n        });\n}\n\n// rate limit to 4 calls every second\nclass Lock {\n    constructor(counter) {\n        this.counter = counter; // how many users can use the resource at one, set 1 for regular lock\n    }\n\n    now() {\n        return Math.round(+new Date() / 1000)\n    }\n    async hold(cb) {\n        while (true) {\n            if (this.counter > 0) { // there is no one wating for the resource\n                this.counter--; // update the resource is in usage\n                return await cb();  // fire the requested callback\n            }\n            await sleep(200)\n        }\n    }\n\n    release() {\n        this.counter++;\n    }\n}\n\nasync function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst RATE_LIMIT = 5\nconst MAX_RETRY = 50\nlet lock = new Lock(RATE_LIMIT)\n\nasync function RateLimitFetch(url){\n    let retryCount = MAX_RETRY\n    let resp\n    while(retryCount > 0){\n        resp = await lock.hold(async () => {\n            let r = await fetch(url)\n            lock.release()\n            return r\n        })\n\n        if (resp.status == 200) {\n            return resp\n        }\n        retryCount--\n    }\n    return resp\n}\n\nexport async function FetchRanks(contestID, users, unofficial){\n    var errored = false\n    const url = CF_API + CF_STANDING_URL(contestID, unofficial, users)\n    console.log(\"Fetching\", url)\n    const resp = await RateLimitFetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        })\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\nexport async function FetchUserInfo(users) {\n    var errored = false\n    const url = CF_API + CF_USER_INFO(users)\n    console.log(\"Fetching\", url)\n    const resp = await RateLimitFetch(url).\n        catch(err => {\n            console.log(err);\n            errored = true\n            return\n        });\n\n    if (errored || resp.status !== 200) {\n        return undefined\n    }\n    return (await resp.json()).result\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nexport default class TimeViewer extends React.Component{\n    constructor(props){\n        super(props);\n        let endAt = props.seconds;\n        if(endAt === undefined){\n            endAt = 0;\n        }\n        let timeLeft = props.mode === \"view\" ? endAt : endAt - Date.now() / 1000;\n        this.state = {\n            timeLeft: timeLeft,\n            endAt: endAt\n        }\n    }\n    isUp(){\n        if(this.props.up !== undefined || this.props.up != false)\n        {  \n            return true;\n        }\n        return false;\n    }\n    render(){\n        let timeLeft = this.state.timeLeft\n        if(isNaN(timeLeft) || timeLeft < 0) timeLeft = 0\n        if(timeLeft === 0){\n            return \"\"\n        }\n        let days = Math.floor(timeLeft / (60 * 60 * 24))\n        timeLeft -= days * (60 * 60 * 24);\n        let hours = Math.floor(timeLeft / (60 * 60))\n        timeLeft -= hours * (60 * 60)\n        let minutes = Math.floor(timeLeft / 60)\n        timeLeft -= minutes * 60\n        let seconds = Math.floor(timeLeft)\n        \n        if(this.props.verbose){\n            return <span>\n                {this.props.label && <span>{this.props.label}: </span>}\n                {days > 0 ? <span>{days} days</span>:<span></span>}\n                {hours> 0 ?  <span>{hours} hours </span>:<span></span>}\n                {minutes > 0 ?  <span>{minutes} minutes </span>:<span></span>}\n                {seconds > 0 ? <span>{seconds} seconds </span> : <span></span>}\n            </span>\n        }\n\n        return <span>\n            {this.props.label && <span>{this.props.label}: </span>}\n            {(days > 0)?<span>{days}d:</span>:<span></span>}\n            <span>{hours}:</span>\n            <span>{minutes}:</span>\n            <span>{seconds}</span>\n        </span>\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        if(this.props.mode === \"view\"){\n            return\n        }\n        clearInterval(this.updateInterval);\n    }\n\n    componentDidMount() {\n        this._isMounted = true\n        if (this.props.mode === \"view\") {\n            return\n        }\n\n        //  setup a timer\n        this.updateInterval = setInterval(() => {\n            // update the timer  \n            this.setState({timeLeft: this.state.endAt - Date.now()/1000});\n\n            if (this.state.timeLeft <= 0) {\n                // clear the interval if expired\n                clearInterval(this.updateInterval);\n            }\n\n        }, 1000);\n    }\n}","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button, ProgressBar } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport { ParseCFHandles, FetchRanks, FetchUserInfo } from \"../lib/CF/API\"\nimport { GetContestStatusText, ParseCFHandlesCached, UrlsToNames } from \"../lib/CF/Local\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/RankList.css';\nimport logo from '../logo.svg';\nimport { GetRanklistUrl} from \"../lib/Goto\"\nimport {StringToHandleSet } from \"../lib/Handles\"\nimport TimeCounter from './TimeViewer'\nimport TimeViewer from './TimeViewer'\n\n\nconst CONTEST_FINISHED = \"FINISHED\"\nconst MaxHandlesLengthForGetURL = 1950\n\nclass RankList extends React.Component{\n    _isMounted = false\n\n    constructor(props) {\n        super(props);\n        this.state = { data: null, loading: true, needRetry: true, failed: false, renderCount: 0, userInfo: {}, userInfoCnt:0, handlesSet: StringToHandleSet(props.handles), handlesSetInRank: new Set(), handlesSetRankQ: new Set(),\n                progressBar:{handles:false, rank:false, info:false, show:true, filterNames:\"\"}\n        };\n    }\n\n    async actionFetchRanksAndFilterByUsers() {\n        let resp = await FetchRanks(this.props.contestID, \"\", this.props.unofficial)\n        if (resp !== undefined) {\n            this.state.data = {}\n            this.state.data.contest = resp.contest\n            this.state.data.problems = resp.problems\n            this.state.data.rows = []\n            \n            let q = new Set()\n            resp.rows.map(r => {\n                let take = false\n                r.party.members.map(m => {\n                    if(this.state.handlesSet.has(m.handle)){\n                        take = true\n                    }\n                })\n                \n                if(take){\n                    this.state.data.rows.push(r)\n                    r.party.members.map(m => {\n                        if(this.state.handlesSetInRank.has(m.handle) == false) {\n                            this.state.handlesSetInRank.add(m.handle)\n                            q.add(m.handle)\n                        }\n                    })\n                }\n                \n            })\n\n            this.state.progressBar.rank = true\n            this.setState({ renderCount: this.state.renderCount + 1 })\n\n            q.forEach(h => {this.state.handlesSetRankQ.add(h)})\n\n            if (this.state.data.contest.phase == CONTEST_FINISHED) {\n                this.state.needRetry = false\n            } else {\n                this.state.needRetry = true\n            }\n        } else {\n            this.state.needRetry = false\n        }\n\n        this.state.loading = false\n        if (this._isMounted) {\n            this.setState({\n                renderCount: this.state.renderCount + 1\n            })\n        }\n    }\n\n    async actionFetchRanks(users) {\n\n        let resp = await FetchRanks(this.props.contestID, users, this.props.unofficial)\n\n        if (resp !== undefined) {\n            this.state.data = resp\n            if (this.state.data.contest.phase == CONTEST_FINISHED) {\n                this.state.needRetry = false\n            } else {\n                this.state.needRetry = true\n            }\n        } else {\n            this.state.needRetry = false\n        }\n\n        this.state.loading = false\n        this.state.progressBar.rank = true\n        if (this._isMounted) {\n            this.setState({\n                renderCount: this.state.renderCount + 1\n            })\n        }\n    }\n\n    async BuildRanklist(){\n        if(this.state.handlesSet.size < 1000){\n            let users = [...this.state.handlesSet].join(';')\n            if(users.length < MaxHandlesLengthForGetURL){\n                this.state.handlesSetRankQ = new Set(this.state.handlesSet)\n                await this.actionFetchRanks(users)\n            } else {\n                await this.actionFetchRanksAndFilterByUsers()\n            }\n        } else {\n            await this.actionFetchRanksAndFilterByUsers()\n        }\n        await this.actionFetchUserInfo()\n    }\n\n    async actionFetchUserInfo() {\n        let hs = [...this.state.handlesSetRankQ]\n        if(hs.length <= 0){\n            return\n        }\n\n        let handles = \"\"\n        let promises = []\n\n        for(let i = 0; i < hs.length; i++){\n            if ((hs[i] + handles).length > MaxHandlesLengthForGetURL){\n                promises.push(FetchUserInfo(handles))\n                handles = \"\"\n            }\n            handles += (hs[i] + \";\")\n        }\n        if(handles != \"\")\n        {\n            promises.push(FetchUserInfo(handles))\n            handles = \"\"\n        }\n        let mp = this.state.userInfo\n        let resps = await Promise.all(promises)\n        \n        resps.map(resp => {\n            resp.map(r => {mp[r.handle] = r\n                this.state.userInfoCnt++\n            })\n        })\n        hs.map(h=>{this.state.handlesSetRankQ.delete(h)})\n        this.state.userInfo = mp\n        this.state.progressBar.info = true\n        if (this._isMounted) {\n            this.setState({\n                renderCount: this.state.renderCount + 1\n            })\n        }\n    }\n\n    async parseHandlesFromAllUrlsAndSet(url) {\n        let urls = url.split(\";\")\n        for (let i = 0; i < urls.length; i++) {\n            this.state.progressBar.handles = false\n            this.setState({ renderCount: this.state.renderCount + 1 })\n            if (urls[i] === \"\") return\n            let handles = (await ParseCFHandlesCached(urls[i])).handles\n            if(handles === \"\"){\n                handles = (await ParseCFHandles(urls[i])).handles\n            }\n            if(handles == undefined) handles = \"\"\n            handles.split(\";\").map(h => this.state.handlesSet.add(h))\n            this.state.handlesSet.delete(\"\")\n        }\n        this.state.progressBar.handles = true\n        this.setState({ renderCount: this.state.renderCount + 1 })\n\n        console.table({ log: \"Total handles\", count: this.state.handlesSet.size})\n    }\n\n    async turnOffProgressBar() {\n        await new Promise(resolve => setTimeout(resolve, 1000 * 5));\n        this.setState({ progressBar: {show:false}, renderCount: this.state.renderCount + 1})\n    }\n\n    async setRanklistFilters() {\n        this.state.filterNames = await UrlsToNames(this.props.url)\n    }\n\n    async setRefreshIfNecessary(){\n        await this.parseHandlesFromAllUrlsAndSet(this.props.url)\n        this.setRanklistFilters()\n        this.state.progressBar.handles = true\n        \n        await this.BuildRanklist()\n        this.turnOffProgressBar()\n        if (this.state.needRetry) {\n            this.parseRankInterval = setInterval(() => { \n                this.BuildRanklist()\n            }, 30000);\n        }\n    }\n    componentWillUnmount() {\n        clearInterval(this.parseRankInterval);\n        this._isMounted = false;\n    }\n\n    componentDidMount() {\n        this.setRefreshIfNecessary().then()\n        this._isMounted = true\n    }\n     \n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.renderCount != this.state.renderCount) {\n            return true\n        }\n        if (nextState.handles != this.state.handles) {\n            this.actionFetchRanks(nextState.handles)\n            return false\n        }\n        return false\n    }\n\n    displayContestProgressBar(relativeTimeSeconds, durationSeconds) {\n        if (relativeTimeSeconds == undefined || durationSeconds == undefined) {\n            return\n        }\n        if (relativeTimeSeconds > durationSeconds || relativeTimeSeconds < 0) {\n            return\n        }\n        let percent = Math.round((relativeTimeSeconds / durationSeconds) * 100)\n        return <tr>\n            <th colSpan=\"100\">\n                <ProgressBar variant=\"info\" now={percent} animated ></ProgressBar>\n            </th>\n        </tr>\n    }\n\n\n    renderProgressBar() {\n        if(!this.state.progressBar.show){\n            return <div></div>\n        }\n        let handleStatus = this.state.progressBar.handles\n        let handleNow = 50\n        let handleText = handleStatus ? \"parsed \" + this.state.handlesSet.size + \" handles\" : \"parsing handles from urls: \" + this.state.handlesSet.size\n\n        let rankStatus = this.state.progressBar.rank\n        let rankNow = handleStatus?50:0\n        let rankText = rankStatus ? \"ranklist contains \" + this.state.data.rows.length + \" matching rows\" : \"parsing ranklist from codeforces...\"\n\n        let infoStatus = this.state.progressBar.info\n        let infoNow = rankStatus ? 50 : 0\n        let infoText = infoStatus ? \"parsed user info for \" + this.state.userInfoCnt + \" handles\" : \"parsing user info from codeforces...\"\n\n        return <ProgressBar>\n            <ProgressBar variant=\"info\" now={handleNow} label={handleText} key={1} animated={!handleStatus} />\n            <ProgressBar variant=\"success\" now={rankNow} label={rankText} key={1} animated={!rankStatus} />\n            <ProgressBar variant=\"info\" now={infoNow} label={infoText} key={1} animated={!infoStatus} />\n        </ProgressBar>\n    }\n\n    render() {\n        let invalidArgs = (this.props.handles == \"\") && (this.props.url == \"\")\n\n        if (invalidArgs) {\n            this.state.loading = false\n        }\n\n        \n\n        if (invalidArgs || this.state.data == null) {\n\n            if (this.state.loading == false) {\n                return <div>\n                    <div className=\"stopped\">\n                        <br /><br /><br />\n                        <p>Not Available or Invalid Args!</p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    {this.renderProgressBar()}\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        let cf = this.state.data\n        let lastRank = 1\n\n        const currentRank = (i) => {\n            if (i === 0 || cf.rows[i - 1].rank == cf.rows[i].rank) {\n                return lastRank\n            }\n            return lastRank = i + 1\n        }\n\n        return <div>\n            {this.renderProgressBar()}\n            {cf.contest.phase === CONTEST_FINISHED && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase !== CONTEST_FINISHED && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-info\">\n                <div className=\"con-tittle\"><span>{cf.contest.name}</span></div>\n                <div className=\"con-meta\">\n                    <div className=\"con-duration\"><TimeViewer mode=\"view\" seconds={cf.contest.durationSeconds} verbose={true} label=\"Duration\"></TimeViewer></div>\n                    <div className=\"con-countdown\"><TimeViewer mode=\"count-down\" seconds={cf.contest.startTimeSeconds + cf.contest.durationSeconds} label=\"Remaining\"></TimeViewer></div>\n                </div>\n                <div className=\"rank-filters\"><span>{this.state.filterNames}</span></div>\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped bordered>\n                    <thead>\n                        <tr className=\"con-status\">\n                            <th className=\"white-hyperlink\" colSpan=\"100\">\n                                <a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/standings\"}>{GetContestStatusText(cf.contest.phase)}</a>\n                            </th>\n                        </tr>\n                        {this.displayContestProgressBar(cf.contest.relativeTimeSeconds, cf.contest.durationSeconds)}\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}><span className=\"hash-rank\" >#</span></th>\n                            <th style={{ \"text-align\": \"center\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th> Score </th>\n                            <th style={{ \"text-align\": \"left\" }}> </th>\n                            {cf.problems.map(p => { \n                                let rating = 1;\n                                if(p.rating !== undefined){\n                                    rating = p.rating\n                                }\n                                return <th className=\"white-hyperlink\" title={p.name + \" : \" + rating}><a target=\"_blank\" href={\"https://codeforces.com/contest/\" + this.props.contestID + \"/problem/\" + p.index}>{p.index}</a></th>})}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} localRank={currentRank(i)} data={r} userInfo={this.state.userInfo} />)}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './css/CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nimport { UrlInfo, HashFromURL, SameUrl } from \"../lib/UrlInfo\"\n\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"rank-layout-rendering\", this.props)\n        return (\n            <div>\n                <CommonLayout key=\"rank-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <RankList key={\"rank-list\" + HashFromURL(this.props)} {...this.props} {...UrlInfo(this.props)}></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Spinner, Table, FormControl } from 'react-bootstrap'\nimport React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/ContestList.css';\nimport { GetContestUrl } from \"../lib/Goto\"\n\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\n\n\nclass ContestList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n        this.state = { data: null, loading: true, needRetry: true, failed: false, searchStr:\"\", renderCount:0 };\n         this.onFilter = this.onFilter.bind(this);\n         this.handleCheckbox = this.handleCheckbox.bind(this);\n\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n    handleCheckbox(e) {\n        let selContest = e.target.value\n        if (!e.target.checked) {\n            e.target.checked = true\n            return\n        }\n        let oldRef = this.selectRef[this.refID[Number(this.props.contestID)]].current\n\n        oldRef.children[0].children[0].children[0].checked = false\n        this.props.history.push(GetContestUrl(selContest, this.props.url, this.props.handles, this.props.parsedHandles, this.props.unofficial))\n    }\n\n\n    onFilter(e){\n        if (this.state.searchStr == undefined) {\n            this.state.searchStr = \"\"\n        }\n        this.state.data.map((contest) => {\n            let rID = this.refID[contest.id]\n            if (rID === undefined) {\n                return\n            }\n            let r = this.selectRef[rID].current\n            if (contest.name.toLowerCase().includes(this.state.searchStr.toLowerCase())) {\n                r.hidden = false\n            } else {\n                r.hidden = true\n            }\n        })\n        \n    }\n\n    renderRow(row) {\n        if (row == null || row == undefined) {\n            return <tr><td>called with null</td></tr>\n        }\n\n        return (<tr ref={this.selectRef[this.refID[row.id]]} >\n            <td textAlign=\"left\"> <div className=\"div-checkbox-selector checkbox-contest\" > <input type=\"checkbox\" onChange={this.handleCheckbox} defaultValue={row.id} defaultChecked={row.id == this.props.contestID} /> </div></td>\n            <td textAlign=\"left\">{row.name}</td>\n            <td textAlign=\"left\">{row.id}</td>\n            <td textAlign=\"center\"><a href={\"https://codeforces.com/contest/\" + row.id} target=\"_blank\">link</a></td>\n        </tr>\n        )\n    }\n\n     renderContests(){\n         var cf = this.state.data\n\n\n         return <div className=\"contests content-div\" key=\"contests-div\">\n             <Table key='contests-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                 <thead>\n                     <tr>\n                         <th colSpan=\"20\">\n                             <div className=\"filter-container flex-input-div\">\n                                 <div>\n                                     <FormControl\n                                        size=\"sm\"\n                                        placeholder=\"Filter by Tittle\" defaultValue={this.state.searchStr}\n                                        onChange={e => {\n                                        this.state.searchStr = e.target.value\n                                        this.onFilter(e)\n                                        }}></FormControl>\n                                 </div>\n                             </div>\n\n                         </th>\n                     </tr>\n\n                     <tr>\n                         <th></th>\n                         <th>Contest Tittle</th>\n                         <th>ID</th>\n                         <th>Codeforces</th>\n                     </tr>\n\n\n                 </thead>\n                 <tbody>\n                         {cf.map((r, i) => {\n                             if (r.phase === \"BEFORE\") {\n                                 return\n                             }\n\n                             if (!(r.id in this.refID)) {\n                                 this.selectRef.push(React.createRef())\n                                 this.refID[r.id] = this.selectRef.length - 1\n                             }\n\n                             return this.renderRow(r)\n                         })}\n                 </tbody>\n             </Table>\n         </div>\n     }\n     \n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n         return <div key=\"content-list-div\" className=\"content-list-div\" >\n            {this.renderContests()}            \n        </div>\n     }\n\n\n    async fetchContests() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"contests-data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.fetchContests()\n    }\n\n     componentDidMount() {\n        this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextState && this.state.renderCount != nextState.renderCount){\n            return true\n        }\n        return false\n    }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\n\nclass ContestListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n    render() {\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <ContestList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport React, { useDebugValue } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/OrgsList.css';\nimport logo from '../logo.svg';\nimport { ParseCFOrgs } from '../lib/CF/API'\nimport { ParseCFOrgsCached, CF_ORG_URL } from '../lib/CF/Local'\n\nimport { Link } from 'react-router-dom'\n\nimport { GetOrgsUrl } from \"../lib/Goto\"\n\n\nclass OrgsList extends React.Component{\n    selectRef = []\n    refID = {}\n\n     constructor(props) {\n        super(props);\n        this.handleCheckbox = this.handleCheckbox.bind(this);\n        this.onFilter = this.onFilter.bind(this);\n        this.state = { data: null, loading: true, urlSet: new Set(props.url.split(\";\")), failed: false, searchStr:\"\", renderCount:0 };\n     }\n\n     handleCheckbox(e){\n        let selOrg = CF_ORG_URL(e.target.defaultValue)\n        if(e.target.checked){\n            this.state.urlSet.add(selOrg)\n        } else {\n            this.state.urlSet.delete(selOrg)\n        }\n        this.state.urlSet.delete(\"\")\n        let compiledUrl = [...this.state.urlSet].join(';')\n        console.log(\"marked\", selOrg, e.target.checked, \"url\", compiledUrl)\n        this.props.history.push(GetOrgsUrl(this.props.contestID, compiledUrl, this.props.handles, this.props.parsedHandles, this.props.unofficial))\n     }\n\n\n    onFilter(e) {\n        if (this.state.searchStr == undefined) {\n            this.state.searchStr = \"\"\n        }\n        this.state.data.map((org) => {\n            let rID = this.refID[org.id]\n            if (rID === undefined) {\n                return\n            }\n            let r = this.selectRef[rID].current\n            if (org.name.toLowerCase().includes(this.state.searchStr.toLowerCase())) {\n                r.hidden = false\n            } else {\n                r.hidden = true\n            }\n        })\n\n    }\n\n     renderOrgs(){\n        \n         let orgs = [ \"soon to be filled\" ]\n        if(this.state.data !== null && this.state.data !== undefined){\n            orgs = this.state.data\n        }\n\n        return <div className=\"orgs content-div\" key=\"orgs-div\">\n            <Table className=\"org-table\" key='orgs-table' variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                <thead>\n                    <tr>\n                        <th colSpan=\"20\">\n                            <div className=\"filter-container flex-input-div\">\n                                <div>\n                                    <FormControl\n                                        size=\"sm\"\n                                        placeholder=\"Filter by Org Name\"\n                                        onChange={ e => {\n                                            this.state.searchStr = e.target.value\n                                            this.onFilter(e)\n                                        }}></FormControl>\n                                </div>\n                            </div>\n\n                        </th>\n                    </tr>\n                    <tr>\n                        <th></th>\n                        <th></th>\n                        <th>Org Name</th>\n                        <th>Handle Count</th>\n                        <th>CF</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {orgs.map(r =>{ \n                    if (!(r.id in this.refID)) {\n                        this.selectRef.push(React.createRef())\n                        this.refID[r.id] = this.selectRef.length - 1\n                    }\n                    let checked = this.state.urlSet.has(CF_ORG_URL(r.id))\n                    return <tr ref={this.selectRef[this.refID[r.id]]} hidden={!checked && (r.hc  <= 10 || r.name.length < 2)} >\n                        <td >\n                            <div className=\"div-checkbox-selector checkbox-org\"> <input type=\"checkbox\" onChange={this.handleCheckbox} value={r.id} defaultChecked={checked}/> </div></td>\n                        <td></td>\n                        <td >{r.name}</td>\n                        <td >{r.hc}</td>\n                        <td ><a href={CF_ORG_URL(r.id)}>link</a></td>\n                    </tr>})}\n                </tbody>\n            </Table>\n        </div>\n     }\n\n     render(){\n         if (this.state.data === null){\n\n            if (this.state.loading === false){\n                return <div>\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Orgs...</p>\n                    </div>\n                </div>\n            }\n        }\n\n         return <div key=\"orgs-list-div\" className=\"content-list-div\" >\n            {this.renderOrgs()}\n            \n        </div>\n     }\n\n\n\n\n    async parseOrgs(){\n        let data = await ParseCFOrgsCached()\n        if(data === null){\n            data = await ParseCFOrgs()\n        }\n        this.state.loading = false\n        this.setState({\n            data:data,\n            renderCount: this.state.renderCount + 1\n        })\n    }\n     componentDidMount() {\n        this.parseOrgs()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextState){\n            return nextState.renderCount != this.state.renderCount\n        }\n        return false\n    }\n}\n\nexport default OrgsList;\n\n","import OrgsList from \"./OrgsList\";\nimport CommonLayout from \"./CommonLayout\"\nimport {UrlInfo, SameUrl} from \"../lib/UrlInfo\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass OrgsListLayout extends React.Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return !SameUrl(nextProps, this.props)\n    }\n\n    render() {\n        console.log(\"con-layout-rendering\", this.props)\n\n        return (\n            <div>\n                <CommonLayout key=\"con-list-layout\" {...this.props}  {...UrlInfo(this.props)}>\n                    <OrgsList key=\"con-list\" {...this.props} {...UrlInfo(this.props)}></OrgsList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default OrgsListLayout","import { ParseCFOrgs, ParseCFHandles } from './lib/CF/API'\nimport { CF_ORG_URL } from './lib/CF/Local'\nimport {Component} from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, ProgressBar } from 'react-bootstrap'\nimport { StringToHandleSet } from './lib/Handles'\n\nasync function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport async function ParseFileLS() {\n    return fetch(\"/assets/ls.txt\", {\n        headers: {\n            'Content-Type': 'text',\n            'Accept': 'text'\n        }\n    })\n        .then((response) => {\n            return response.text()\n        })\n}\n\nclass RateLimit {\n    constructor(counter) {\n        this.counter = counter; // how many users can use the resource at one, set 1 for regular lock\n    }\n    async exec(cb) {\n        while (true) {\n            if (this.counter > 0) { // there is no one wating for the resource\n                this.counter--; // update the resource is in usage\n                return await cb();  // fire the requested callback\n            }\n            await sleep(200)\n        }\n    }\n\n    done() {\n        this.counter++;\n    }\n}\n\nexport default class AssetSetup extends Component {\n\n    AutoDownload(name, data) {\n        if(this.ls.has(name)){\n            return\n        }\n        // Create blob link to download\n        const url = window.URL.createObjectURL(\n            new Blob([data]),\n        );\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute(\n            'download',\n            name,\n        );\n\n        // Append to html link element page\n        document.body.appendChild(link);\n\n        // Start download\n        link.click();\n\n        // Clean up and remove the link\n        link.parentNode.removeChild(link);\n    }\n\n\n    constructor(){\n        super()\n        this.state={completed:0, total:10}\n        this.ls = new Set()\n        this.rateLimit = new RateLimit(50)\n    }\n\n    componentDidMount(){\n        this.setup()\n    }\n\n    render(){\n        return <div>\n            <p>downloading assets</p>\n            <ProgressBar variant=\"info\" label={Math.round((this.state.completed / this.state.total) * 100)}  now={Math.round((this.state.completed / this.state.total) * 100)} animated={this.state.completed != this.state.total} ></ProgressBar>\n        </div>\n    }\n\n    async setup (){\n        this.ls = new Set((await ParseFileLS()).split(/\\n/))\n        console.log(\"Starting setup\")\n        let orgs = await ParseCFOrgs()\n        this.setState({completed:1, total:100})\n        this.AutoDownload(\"orgs.json\", JSON.stringify(orgs))\n        console.log(\"parsing all handles\")\n        await this.scrapeAllHandles(orgs)\n        console.log(\"all files downloaded\")\n        this.setState({ completed: 100, total: 100 })\n    }\n\n    async scrapeAllHandles(orgs) {\n        let stepCount = 0\n        let promises = []\n        this.setState({total: orgs.length})\n        for (let org of orgs) {\n            let fileName = \"id.org.\" + org.id + \".json\"\n            const work = async () => {\n                let resp = await ParseCFHandles(CF_ORG_URL(org.id), org.hc)\n                let phc = StringToHandleSet(resp.handles).size\n                if(phc >= org.hc){\n                    this.AutoDownload(fileName, JSON.stringify(resp))\n                } else {\n                    console.table({log:\"Couldn't parse org\", orgID:org.id, orgName:org.name, handles:resp.handles, parsedHandleCount:phc, expectedHandleCount:org.hc})\n                }\n            }\n\n            if (!this.ls.has(fileName)) {\n                this.rateLimit.exec(()=> work().then(()=>{ \n                    this.rateLimit.done()\n                    stepCount++\n                    if (stepCount % 10 === 0) {\n                        this.setState({ completed: stepCount, total: orgs.length })\n                    }\n                }))\n            } else {\n                stepCount++\n            }\n            \n            \n\n        }\n    }\n}\n\n","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport OrgsListLayout from './OrgsListLayout'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport AssetSetup from '../AssetSetup'\n\n\nexport default function AppContainer(){\n    return <HashRouter key='hash-router'>\n        <div className=\"Switch-Route-Block\" key='switch-route-block'>\n            <Switch key='switch-route-sw'>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route key='route-contest-list' path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout key=\"contest-list-layout\" {...props}/>} />\n                <Route key='route-orgs-list' path=\"/selector/orgs/:contestID\" render={(props) => <OrgsListLayout key=\"orgs-list-layout\" {...props}/>} />\n                <Route key='route-rank-list' path=\"/contest/:contestID\" render={(props) => <RankListLayout key=\"single-rank-instance\" {...props} />} />\n                <Route key='setup-lah' path=\"/setup\" exact render={() => <AssetSetup/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\"/>\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer key='app-conatiner'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}