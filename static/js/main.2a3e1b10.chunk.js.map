{"version":3,"sources":["components/RankRow.js","components/Navigation.js","lib/ParseUser.js","logo.svg","components/RankList.js","components/CommonLayout.js","components/RankListLayout.js","components/ContestRow.js","components/ContestList.js","components/ContestListLayout.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["RankRow","data","rowid","style","rank","party","members","map","m","handle","points","problemResults","r","Navigation","props","rUrl","url","rContestID","contestID","useState","setUrl","setContestID","console","log","InputJSX","className","Form","Row","Col","xs","Label","htmlFor","srOnly","FormControl","id","placeholder","defaultValue","onChange","e","target","value","InputGroup","Prepend","Text","to","Button","type","Navbar","bg","variant","size","Nav","Link","href","active","location","pathname","startsWith","disabled","ProxyHost","ParseCFUsersFromRank","a","fetch","then","response","text","html","docAsStr","DOMParser","parseFromString","querySelector","innerHTML","found","matchAll","resp","f","concat","catch","err","RankList","state","filterUrl","loading","needRetry","failed","users","errored","this","status","json","result","contest","phase","forceUpdate","match","params","search","Spinner","width","height","animation","role","cf","src","logo","alt","name","Table","responsive","striped","problems","p","index","rows","i","ParseCFUsersFromURL","actionFetchRanks","alert","repeatedWork","interval","setInterval","setRefreshIfNecessary","clearInterval","React","Component","CommonLayout","children","RankListLayout","setState","updateStateVars","nextProps","nextState","stateChangedLah","ContestRow","selected","defaultChecked","CF_CONTESTS_URL","gym","ContestList","actionFetchContests","ContestListLayout","AppContainer","path","render","from","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a3e1b10.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function RankRow({data, rowid}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr>\n        <td style={{ \"text-align\": \"left\" }}>{rowid}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.rank}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.party.members.map(m => m.handle + \" \")}</td>\n        <td >{data.points}</td>\n        <td ></td>\n        {data.problemResults.map(r => <td>{r.points}</td>)}\n    </tr>)\n}\n","import Input from './Input'\nimport { useLocation } from 'react-router';\n\nimport { useState, useEffect } from 'react'\nimport { Spinner, Table, Form, Col, InputGroup, FormControl, Button, Navbar, Nav} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n\n\n\nexport default function Navigation(props){\n    var rUrl = props.url\n    var rContestID = props.contestID\n\n\n    const [url, setUrl] = useState(rUrl)\n    const [contestID, setContestID] = useState(rContestID)\n\n\n    console.log(\"Nav-props\",props)\n\n\n    var InputJSX = <div className=\"input-url\">\n        <Form  key={rUrl+rContestID}>\n            <Form.Row className=\"align-items-center\">\n                <Col xs=\"auto\">\n                    <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                        URL\n                    </Form.Label>\n                    <FormControl\n                        className=\"mb-2\"\n                        id=\"inlineFormInput\"\n                        placeholder=\"city/organization cf url\"\n                        defaultValue={rUrl}\n                        onChange={e => setUrl(e.target.value)}\n                        // onLoad={e => setUrl(e.target.value)}\n                    />\n                </Col>\n                <Col xs=\"auto\">\n                    <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n                        ContestID\n                    </Form.Label>\n                    <InputGroup className=\"mb-2\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>@contest-</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            id=\"inlineFormInputGroup\"\n                            placeholder=\"ContestID\"\n                            value={contestID}\n                            onChange={\n                                (e)=> {\n                                    debugger\n                                    setContestID(e.target.value)\n                                }\n                            }\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs=\"auto\">\n                    <Link to={\"/contest/\" + contestID + \"?url=\" + url}>\n                        <Button type=\"submit\" className=\"mb-2\">\n                            Load\n                        </Button>\n                    </Link>\n                </Col>\n            </Form.Row>\n        </Form>\n    </div>\n\n    \n    return <div>\n        <Navbar bg=\"dark\" variant=\"dark\" size=\"small\" >\n        {/* <Navbar.Brand href=\"\">Navbar</Navbar.Brand> */}\n        <Nav className=\"mr-auto\">\n                <Nav.Link href={\"#selector/contests/\" + contestID + \"?url=\" + url} active={props.location.pathname.startsWith(\"/selector/contests\")}>Contests</Nav.Link>\n            <Nav.Link disabled active={props.location.pathname.startsWith(\"/contest\")}>Ranklist</Nav.Link>\n            {/* <Nav.Link href=\"#region\">Features</Nav.Link> */}\n        </Nav>\n        {InputJSX}\n        {/* <Input contestID={contestID} url={url}/> */}\n    </Navbar>\n    </div>\n\n}","const ProxyHost = `https://be-beam.swiftshopbd.com/`\n\n\nexport default async function ParseCFUsersFromRank(url){\n    return fetch(ProxyHost+url, {\n        \"X-Requested-With\": \"cf\"\n    })\n    .then((response) => {\n        return response.text()\n        //debugger\n    }).then(function (html) {\n        var parser = new DOMParser();\n\n        var doc = parser.parseFromString(html, \"text/html\").querySelector(\"#pageContent > div.datatable.ratingsDatatable\")\n\n        var docAsStr = doc.innerHTML\n\n        var found = [...docAsStr.matchAll(`/profile/(.+?)\\\"`)]\n\n        var resp = \"\"\n        for(const f of found){\n            resp = resp.concat(f[1] + \";\")\n        }\n        return resp\n    })\n    .catch(function (err) {\n        console.log('Failed to fetch page: ', err);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport RankRow from \"./RankRow\"\nimport Navigation from \"./Navigation\"\nimport React from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './RankList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_STANDING_URL = (id) => `/contest.standings?contestId=`+id+`&handles=`\n\n\n class RankList extends React.Component{\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, contestID: 1541, filterUrl: \"\", loading:true, needRetry:true, failed:false };\n     }\n\n     async actionFetchRanks(users){\n         var errored = false\n         const url = CF_API + CF_STANDING_URL(this.state.contestID) + users\n         console.log(\"Fetching\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n             if (this.state.data.contest.phase == \"FINISHED\") {\n                 this.state.needRetry = false\n             } else {\n                 this.state.needRetry = true\n             }\n         } else {\n            this.state.needRetry = false\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n\n     render(){\n\n        try{\n            const { match: { params: { contestID } }, location:{search} } = this.props;\n            var filterUrl = search.match(`url=(.+)`)[1]\n            if (contestID != null && filterUrl != null) {\n                this.state.contestID = contestID\n                this.state.filterUrl = filterUrl\n            }\n            console.log(\"state set\", this.state.contestID, this.state.filterUrl)\n\n         }catch(e){\n             console.log(\"couldn't read params\", e)\n         }\n\n         if (this.state.data == null){\n\n            if (this.state.loading == false){\n                return <div>\n                    {/* <Navigation contestID={this.state.contestID} url={this.state.filterUrl} /> */}\n                        <div className=\"stopped\">\n\n                        {/* <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner> */}\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    {/* <Navigation contestID={this.state.contestID} url={this.state.filterUrl}/> */}\n                    <div className=\"loading\">\n\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Constructing Ranklist...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        var cf = this.state.data\n        return <div>\n            {/* <Navigation contestID={this.state.contestID} url={this.state.filterUrl} /> */}\n            {cf.contest.phase == \"FINISHED\" && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n            {cf.contest.phase != \"FINISHED\" && <img src={logo} className=\"App-logo-animate\" alt=\"logo\" />}\n\n            <div className=\"con-tittle\">\n                {cf.contest.name}\n            </div>\n\n            <div className=\"ranklist\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                        <tr>\n                            <th style={{ \"text-align\": \"left\" }}>#</th>\n                            <th style={{ \"text-align\": \"left\" }}>Rank</th>\n                            <th style={{ \"text-align\": \"left\" }}>Handle</th>\n                            <th >Points</th>\n                            <th style={{ \"text-align\": \"left\"}}> </th>\n                            {cf.problems.map(p => <th>{p.index}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.rows.map((r, i) => <RankRow key={i} rowid={i + 1} data={r} />) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return ParseCFUsersFromURL(this.state.filterUrl)\n        .then(\n            (users) => {\n                console.log(\"users\", users)\n                return this.actionFetchRanks(users)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n        if (this.state.needRetry) {\n            this.interval = setInterval(()=>{this.repeatedWork()}, 30000);\n        }\n    }\n\n     componentDidMount() {\n         this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         clearInterval(this.interval);\n     }\n//      componentDidUpdate(prevProps, prevState, snapshot) {\n//     //      debugger\n//     //      // Check to see if the \"applied\" flag got changed (NOT just \"set\")\n//     //      if (this.props.location.state.applied && !prevProps.location.state.applied) {\n//     //          this.state = { data: null, contestID: 1541, filterUrl: BSMRSTU_ORG_URL, loading: true, needRetry: true, failed: false }\n//     //          this.forceUpdate()\n//     //      }\n//     //  }\n}\n\nexport default RankList;\n\n","import React from 'react'\nimport Navigation from \"./Navigation\";\nimport './CommonLayout.css'\n\nclass CommonLayout extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"layout-header\">\n                    <Navigation key={this.props.contestID+this.props.url} {...this.props} />\n                </div>\n                <div className=\"App-Container\">\n                    {this.props.children}\n                </div>\n                <div className=\"footer\">\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CommonLayout\n","import RankList from \"./RankList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\n\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass RankListLayout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { url: BSMRSTU_ORG_URL, contestID: 1541 };\n    }\n\n    updateStateVars(props) {\n        try {\n            this.setState({\n                url: props.location.search.match(`url=(.+)`)[1],\n                contestID: props.match.params.contestID\n            })\n        }\n        catch (e) {\n            console.log(\"error setting rank-list-layout state\", e)\n        }\n        console.log(\"con-layout-state\", this.state)\n    }\n\n    stateChangedLah(props) {\n        try {\n            if (this.state.url !== props.location.search.match(`url=(.+)`)[1] || this.state.contestID !== props.match.params.contestID) {\n                return true\n            }\n            return false\n        }\n        catch (e) {\n            return true\n        }\n    }\n\n    componentDidMount() {\n        this.updateStateVars(this.props)\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // debugger\n        if (this.stateChangedLah(nextProps)) {\n            this.updateStateVars(nextProps)\n            return true\n        }\n        return false\n    }\n\n\n    render() {\n        return (\n            <div>\n                <CommonLayout key={\"rank-list-layout\" + this.state.url + this.state.contestID} {...this.props} url={this.state.url} contestID={this.state.contestID}>\n                    <RankList key={\"rank-list-\" + this.state.url + this.state.contestID} {...this.props} url={this.state.url} contestID={this.state.contestID} ></RankList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default RankListLayout","import { Link } from 'react-router-dom'\n\nexport default function ContestRow({data, selected, url}){\n    const items = []\n    //debugger;\n    if(data == null) {\n        return <tr><td>called with null</td></tr>\n    }\n\n    return (<tr>\n        {/* <td><input type=\"checkbox\" defaultChecked={this.state.chkbox} onChange={this.handleChangeChk} /></td> */}\n        <td><Link to={'/selector/contests/'+data.id+'?url='+url}><input type=\"radio\" defaultChecked={selected} /></Link></td>\n        <td style={{ \"text-align\": \"left\" }}>{data.name}</td>\n        <td style={{ \"text-align\": \"left\" }}>{data.id}</td>\n    </tr>)\n}\n","import { Spinner, Table, Form, Col, InputGroup, FormControl, Button } from 'react-bootstrap'\nimport ContestRow from \"./ContestRow\"\nimport Navigation from \"./Navigation\"\nimport React, { useDebugValue } from 'react'\nimport ParseCFUsersFromURL from \"../lib/ParseUser\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ContestList.css';\nimport logo from '../logo.svg';\n\n\n\nconst CF_API = \"https://codeforces.com/api\"\nconst CF_CONTESTS_URL = (gym) =>  `/contest.list?gym=`+gym\n\nclass ContestList extends React.Component{\n\n     constructor(props) {\n        super(props);\n         this.state = { data: null, contestID: 1541, filterUrl: \"\", loading:true, needRetry:true, failed:false };\n     }\n\n     async actionFetchContests(gym){\n         var errored = false\n         const url = CF_API + CF_CONTESTS_URL(gym)\n         console.log(\"Fetching Contests\", url)\n         const resp = await fetch(url).\n             catch(err => {\n                 console.log(err);\n                 errored = true\n                 return\n             });\n\n         if (errored) {\n             return\n         }\n\n         if (resp.status === 200) {\n             this.state.data = (await resp.json()).result\n         } else {\n\n        }\n         this.state.loading = false\n         this.forceUpdate()\n     }\n     \n\n     render(){\n\n        try{\n            const { match: { params: { contestID } }, location:{search} } = this.props;\n            var filterUrl = search.match(`url=(.+)`)[1]\n            if (contestID != null && filterUrl != null) {\n                this.state.contestID = contestID\n                this.state.filterUrl = filterUrl\n            }\n            console.log(\"state set\", this.state.contestID, this.state.filterUrl)\n\n         }catch(e){\n             console.log(\"couldn't read params\", e)\n         }\n\n         if (this.state.data == null){\n\n            if (this.state.loading == false){\n                return <div>\n                    <Navigation contestID={this.state.contestID} url={this.state.filterUrl} />\n                        <div className=\"stopped\">\n                        <p>Not Available! </p>\n                    </div>\n                </div>\n\n            } else {\n                return <div>\n                    {/* <Navigation contestID={this.state.contestID} url={this.state.filterUrl}/> */}\n                    <div className=\"loading\">\n                        <Spinner style={{ width: \"100px\", height: \"100px\" }} animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        <p>Parsing Contests...</p>\n                    </div>\n                </div>\n            }\n        }\n\n\n        var cf = this.state.data\n        return <div>\n            {/* <Navigation contestID={this.state.contestID} url={this.state.filterUrl} /> */}\n            <div className=\"contests\">\n                <Table variant=\"dark\" size=\"sm\" responsive=\"sm\" striped=\"true\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>Contest Tittle</th>\n                            <th>Contest ID</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {cf.map((r, i) => <ContestRow key={r.id + this.state.contestID} data={r} url={this.state.filterUrl} selected={r.id == this.state.contestID}/>) }\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n     }\n\n\n    async repeatedWork() {\n        this.state.loading = true\n        return this.actionFetchContests(false)\n        .then(\n            (data) => {\n                console.log(\"data\", data)\n            })\n        .catch(e => alert(e))\n    }\n\n    async setRefreshIfNecessary(){\n        await this.repeatedWork()\n    }\n\n     componentDidMount() {\n         this.setRefreshIfNecessary().then()\n     }\n     \n     componentWillUnmount() {\n         //clearInterval(this.interval);\n     }\n}\n\nexport default ContestList;\n\n","import ContestList from \"./ContestList\";\nimport CommonLayout from \"./CommonLayout\"\nimport React from 'react'\nconst BSMRSTU_ORG_URL = `https://codeforces.com/ratings/organization/3403`\n\nclass ContestListLayout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { url: BSMRSTU_ORG_URL, contestID:1541 };\n    }\n\n    updateStateVars(props){\n        try {\n            this.setState({\n                url : props.location.search.match(`url=(.+)`)[1],\n                contestID : props.match.params.contestID\n            })\n        }\n        catch (e) {\n            console.log(\"error setting contest-list-layout state\", e)\n        }\n        console.log(\"con-layout-state\", this.state)\n    }\n\n    stateChangedLah(props) {\n        try {\n            if (this.state.url !== props.location.search.match(`url=(.+)`)[1] || this.state.contestID !== props.match.params.contestID){\n                return true\n            }\n            return false\n        }\n        catch (e) {\n            return true\n        }\n    }\n\n    componentDidMount(){\n        this.updateStateVars(this.props)\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        // debugger\n        if(this.stateChangedLah(nextProps)){\n            this.updateStateVars(nextProps)\n            return true\n        }\n        return false\n    }\n\n    render() {\n        return (\n            <div>\n                <CommonLayout key={\"con-list-layout\"} {...this.props} url={this.state.url} contestID={this.state.contestID}>\n                    <ContestList key={\"con-list-\"} {...this.props} url={this.state.url} contestID={this.state.contestID} ></ContestList>\n                </CommonLayout>\n            </div>\n        );\n    }\n};\n\nexport default ContestListLayout","import RankListLayout from './RankListLayout'\nimport ContestListLayout from './ContestListLayout'\nimport Navigation from './Navigation'\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useState } from 'react'\n\n\nexport default function AppContainer(){\n    return <HashRouter>\n        {/* <Switch>\n            <Route path=\"/selector/contests/:contestID\" component={Navigation} />\n            <Route path=\"/contest/:contestID\" component={Navigation} />\n            <Route path=\"/\" component={Navigation} />\n        </Switch>\n\n        <Navigation url={url} contestID={contestID}/> */}\n        <div className=\"Switch-Route-Block\">\n            <Switch>\n                {/* <Route path=\"/contest/:contestID\" component={RankList} /> */}\n                <Route path=\"/selector/contests/:contestID\" render={(props) => <ContestListLayout {...props}/>} />\n                <Route path=\"/contest/:contestID\" render={(props) => <RankListLayout {...props}/>} />\n                <Redirect from=\"/\" to=\"/contest/1541?url=https://codeforces.com/ratings/organization/3403\" component={ContestListLayout} />\n            </Switch>\n        </div>\n    </HashRouter>\n}","import './App.css';\nimport AppContainer from './components/AppContainer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppContainer/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}